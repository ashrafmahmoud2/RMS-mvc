@using RMS.Web.Core.ViewModels.GovernateAreaBranch
@model CheckoutViewModel


<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>الدفع وتأكيد الطلب</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #185499;
            --primary-dark: #0f3d7a;
            --primary-light: #3e7bb5;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --info-color: #3b82f6;
            --background: #f8fafc;
            --surface: #ffffff;
            --surface-hover: #f1f5f9;
            --border: #e2e8f0;
            --border-focus: #3b82f6;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --text-muted: #94a3b8;
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
            --border-radius: 16px;
            --border-radius-lg: 24px;
            --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            --transition-spring: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Arial, sans-serif;
            background: var(--background);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            padding-bottom: 120px;
            margin: 0;
            -webkit-font-smoothing: antialiased;
        }

        /* Header */
        .checkout-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            padding: 16px 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
            border-bottom-right-radius: 30px;
            border-bottom-left-radius: 30px;
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .header-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            padding: 12px;
            transition: var(--transition);
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
        }

            .header-btn:hover {
                background: rgba(255, 255, 255, 0.2);
                transform: scale(1.05);
            }

        .header-title {
            color: white;
            font-size: 18px;
            font-weight: 600;
        }

        /* Main Container */
        .main-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Progress Steps */
        .progress-container {
            background: var(--surface);
            border-radius: var(--border-radius-lg);
            padding: 24px;
            margin-bottom: 24px;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border);
        }

        .progress-steps {
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: relative;
        }

        .progress-line {
            position: absolute;
            top: 24px;
            left: 24px;
            right: 24px;
            height: 3px;
            background: var(--border);
            z-index: 1;
            border-radius: 2px;
        }

        .progress-line-active {
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--success-color));
            width: 50%;
            transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 2px;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 2;
            flex: 1;
        }

        .step-circle {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: var(--surface);
            border: 3px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: var(--text-muted);
            transition: var(--transition-spring);
            font-size: 16px;
        }

        .step.active .step-circle {
            background: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            transform: scale(1.1);
            box-shadow: 0 0 0 4px rgba(24, 84, 153, 0.2);
        }

        .step.completed .step-circle {
            background: var(--success-color);
            border-color: var(--success-color);
            color: white;
            animation: checkmark 0.6s ease-out;
        }

        @@keyframes checkmark {
            0% {
                transform: scale(0.8);
            }

            50% {
                transform: scale(1.2);
            }

            100% {
                transform: scale(1);
            }
        }

        .step-label {
            margin-top: 12px;
            font-size: 13px;
            font-weight: 500;
            color: var(--text-muted);
            text-align: center;
            transition: var(--transition);
        }

        .step.active .step-label,
        .step.completed .step-label {
            color: var(--text-primary);
            font-weight: 600;
        }

        /* Order Summary */
        .order-summary {
            background: var(--surface);
            border-radius: var(--border-radius-lg);
            padding: 24px;
            margin-bottom: 24px;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border);
            position: relative;
            overflow: hidden;
        }

            .order-summary::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
            }

        .summary-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 20px;
            color: var(--primary-color);
            font-size: 18px;
            font-weight: 600;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid var(--border);
            transition: var(--transition);
        }

            .summary-item:hover {
                background: var(--surface-hover);
                margin: 0 -12px;
                padding-left: 12px;
                padding-right: 12px;
                border-radius: 8px;
            }

            .summary-item:last-child {
                border-bottom: none;
                font-weight: 600;
                font-size: 18px;
                color: var(--primary-color);
                background: rgba(24, 84, 153, 0.05);
                margin: 12px -12px -12px;
                padding: 16px 12px 12px;
                border-radius: 0 0 var(--border-radius-lg) var(--border-radius-lg);
            }

        /* Form Styles */
        .form-section {
            background: var(--surface);
            border-radius: var(--border-radius-lg);
            padding: 28px;
            box-shadow: var(--shadow-sm);
            margin-bottom: 24px;
            border: 1px solid var(--border);
            transition: var(--transition);
        }

            .form-section:hover {
                box-shadow: var(--shadow);
            }

        .form-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 24px;
            color: var(--primary-color);
            font-size: 20px;
            font-weight: 600;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            position: relative;
        }

            .form-group.full-width {
                grid-column: 1 / -1;
            }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-primary);
            font-size: 14px;
            transition: var(--transition);
        }

            .form-label.required::after {
                content: " *";
                color: var(--danger-color);
            }

        .form-input,
        .form-select,
        .form-textarea {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid var(--border);
            border-radius: 12px;
            font-size: 15px;
            transition: var(--transition);
            background: var(--surface);
            color: var(--text-primary);
            font-family: inherit;
        }

            .form-input:focus,
            .form-select:focus,
            .form-textarea:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 4px rgba(24, 84, 153, 0.1);
                transform: translateY(-1px);
            }

            .form-input.error,
            .form-select.error,
            .form-textarea.error {
                border-color: var(--danger-color);
                box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.1);
                animation: shake 0.4s ease-in-out;
            }

        @@keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-4px);
            }

            75% {
                transform: translateX(4px);
            }
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
            font-family: inherit;
        }

        .error-message {
            color: var(--danger-color);
            font-size: 12px;
            margin-top: 6px;
            display: flex;
            align-items: center;
            gap: 4px;
            opacity: 0;
            transform: translateY(-4px);
            transition: var(--transition);
        }

            .error-message.show {
                opacity: 1;
                transform: translateY(0);
            }

        /* Payment Options */
        .payment-option {
            display: flex;
            align-items: center;
            gap: 16px;
            padding: 20px;
            border: 2px solid var(--border);
            border-radius: 16px;
            margin-bottom: 16px;
            cursor: pointer;
            transition: var(--transition);
            background: var(--surface);
            position: relative;
            overflow: hidden;
        }

            .payment-option:hover:not(.disabled) {
                border-color: var(--primary-color);
                background: rgba(24, 84, 153, 0.02);
                transform: translateY(-2px);
                box-shadow: var(--shadow);
            }

            .payment-option.selected {
                border-color: var(--primary-color);
                background: rgba(24, 84, 153, 0.05);
                box-shadow: 0 0 0 4px rgba(24, 84, 153, 0.1);
            }

            .payment-option.disabled {
                opacity: 0.5;
                cursor: not-allowed;
                background: var(--surface-hover);
            }

        .payment-radio {
            width: 20px;
            height: 20px;
            accent-color: var(--primary-color);
        }

        .payment-info {
            flex: 1;
        }

        .payment-title {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 4px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .payment-description {
            color: var(--text-secondary);
            font-size: 14px;
        }

        /* OTP Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(8px);
            z-index: 1000;
            display: none;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease-out;
        }

            .modal-overlay.show {
                display: flex;
            }

        .otp-modal {
            background: var(--surface);
            border-radius: var(--border-radius-lg);
            padding: 32px;
            max-width: 400px;
            width: 90%;
            box-shadow: var(--shadow-lg);
            border: 1px solid var(--border);
            position: relative;
            animation: slideUp 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        .otp-header {
            text-align: center;
            margin-bottom: 24px;
        }

        .otp-icon {
            width: 64px;
            height: 64px;
            background: var(--primary-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 16px;
            font-size: 24px;
            color: white;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(24, 84, 153, 0.4);
            }

            70% {
                box-shadow: 0 0 0 20px rgba(24, 84, 153, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(24, 84, 153, 0);
            }
        }

        .otp-title {
            font-size: 22px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .otp-description {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .phone-display {
            color: var(--primary-color);
            font-weight: 600;
        }

        .otp-inputs {
            display: flex;
            gap: 12px;
            justify-content: center;
            margin: 24px 0;
            direction: ltr;
        }

        .otp-input {
            width: 48px;
            height: 48px;
            border: 2px solid var(--border);
            border-radius: 8px;
            text-align: center;
            font-size: 20px;
            font-weight: 600;
            background: var(--surface);
            color: var(--text-primary);
            transition: var(--transition);
        }

            .otp-input:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 4px rgba(24, 84, 153, 0.1);
                transform: scale(1.05);
            }

            .otp-input.error {
                border-color: var(--danger-color);
                animation: shake 0.4s ease-in-out;
            }

            .otp-input.success {
                border-color: var(--success-color);
                background: rgba(16, 185, 129, 0.05);
            }

        .otp-timer {
            text-align: center;
            margin: 16px 0;
            font-size: 14px;
            color: var(--text-secondary);
        }

        .timer-text {
            color: var(--primary-color);
            font-weight: 600;
        }

        .otp-resend {
            text-align: center;
            margin: 16px 0;
        }

        .resend-btn {
            background: none;
            border: none;
            color: var(--primary-color);
            font-weight: 600;
            cursor: pointer;
            text-decoration: underline;
            transition: var(--transition);
        }

            .resend-btn:hover:not(:disabled) {
                color: var(--primary-dark);
            }

            .resend-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

        .otp-actions {
            display: flex;
            gap: 12px;
            margin-top: 24px;
        }

        .otp-btn {
            flex: 1;
            padding: 12px 20px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            font-family: inherit;
        }

        .otp-btn-cancel {
            background: var(--surface-hover);
            color: var(--text-secondary);
            border: 1px solid var(--border);
        }

            .otp-btn-cancel:hover {
                background: var(--border);
            }

        .otp-btn-verify {
            background: var(--primary-color);
            color: white;
        }

            .otp-btn-verify:hover:not(:disabled) {
                background: var(--primary-dark);
                transform: translateY(-1px);
            }

            .otp-btn-verify:disabled {
                opacity: 0.6;
                cursor: not-allowed;
            }

        .otp-error {
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger-color);
            padding: 12px 16px;
            border-radius: 8px;
            margin: 16px 0;
            font-size: 14px;
            text-align: center;
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        .otp-attempts {
            text-align: center;
            font-size: 12px;
            color: var(--text-muted);
            margin-top: 8px;
        }

        .blocked-message {
            background: rgba(239, 68, 68, 0.1);
            color: var(--danger-color);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        .blocked-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.8;
        }

        .blocked-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .blocked-description {
            font-size: 14px;
            opacity: 0.8;
        }

        /* Place Order Button */
        .place-order-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 16px 20px;
            box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.1);
            z-index: 50;
            border-top: 1px solid var(--border);
        }

        .place-order-btn {
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            border-radius: 16px;
            padding: 18px 24px;
            cursor: pointer;
            transition: var(--transition-spring);
            box-shadow: var(--shadow);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 16px;
            font-weight: 600;
            font-family: inherit;
            position: relative;
            overflow: hidden;
        }

            .place-order-btn:hover:not(:disabled) {
                transform: translateY(-3px);
                box-shadow: 0 12px 40px rgba(24, 84, 153, 0.4);
            }

            .place-order-btn:active:not(:disabled) {
                transform: translateY(-1px);
            }

            .place-order-btn:disabled {
                opacity: 0.7;
                cursor: not-allowed;
                transform: none;
            }

        .btn-content {
            display: flex;
            align-items: center;
            gap: 12px;
            position: relative;
            z-index: 1;
        }

        .btn-price {
            font-size: 18px;
            font-weight: 700;
            position: relative;
            z-index: 1;
        }

        /* Loading Spinner */
        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Animations */
        .fade-in {
            animation: fadeIn 0.6s ease-out;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .slide-up {
            animation: slideUp 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(40px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .main-container {
                padding: 16px;
            }

            .form-row {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .progress-steps {
                gap: 8px;
            }

            .step-label {
                font-size: 11px;
            }

            .step-circle {
                width: 40px;
                height: 40px;
                font-size: 14px;
            }

            .form-section {
                padding: 20px;
            }

            .header-title {
                font-size: 16px;
            }

            .otp-modal {
                padding: 24px;
            }

            .otp-inputs {
                gap: 8px;
            }

            .otp-input {
                width: 40px;
                height: 40px;
            }
        }


        /* Fade-out animation */
        .page-exit {
            animation: fadeOut 0.6s ease forwards;
        }

        @@keyframes fadeOut {
            from {
                opacity: 1;
                transform: translateY(0);
            }

            to {
                opacity: 0;
                transform: translateY(30px);
            }
        }

        }
    </style>
</head>

<body>
    <header class="checkout-header">
        <div class="header-container">
            <button class="header-btn" onclick="window.history.back()" aria-label="العودة">
                <i class="fa-solid fa-chevron-right"></i>
            </button>
            <h1 class="header-title">تأكيد الطلب والدفع</h1>
            <div></div>
        </div>
    </header>

    <main class="main-container">
        <!-- Progress Steps -->
        <div class="progress-container fade-in">
            <div class="progress-steps">
                <div class="progress-line">
                    <div class="progress-line-active"></div>
                </div>
                <div class="step completed">
                    <div class="step-circle">
                        <i class="fas fa-check"></i>
                    </div>
                    <div class="step-label">السلة</div>
                </div>
                <div class="step active">
                    <div class="step-circle">2</div>
                    <div class="step-label">العنوان والتوصيل</div>
                </div>
                <div class="step">
                    <div class="step-circle">3</div>
                    <div class="step-label">الدفع</div>
                </div>
            </div>
        </div>

        <!-- ملخص الطلب -->
        <div class="order-summary fade-in">
            <div class="summary-header">
                <i class="fas fa-receipt"></i>
                <span>ملخص الطلب</span>
            </div>
            <div class="summary-item">
                <span>المجموع الفرعي</span>
                <span class="subtotal">0.00 جنيه</span>
            </div>
            <div class="summary-item">
                <span>رسوم التوصيل</span>
                <span class="delivery-fee">@Model. جنيه</span>
            </div>
            <div class="summary-item">
                <span>الإجمالي</span>
                <span class="total-amount"> جنيه</span>
            </div>
        </div>

        <!-- عنوان التوصيل -->
        <form class="form-section fade-in" id="addressForm">
            @Html.AntiForgeryToken()

            <div class="form-header">
                <i class="fas fa-map-marker-alt"></i>
                <span>عنوان التوصيل</span>
            </div>

            <!-- رقم الهاتف -->
            <div class="form-group full-width">
                <label class="form-label required" for="phone">رقم الهاتف</label>
                <input type="tel" id="phone" name="phone" class="form-input"
                       placeholder="01xxxxxxxxx" maxlength="11">
                <div class="error-message" id="phoneError">يرجى إدخال رقم هاتف صحيح</div>
            </div>

            <!-- المحافظة -->
            <div class="form-group full-width">
                <label class="form-label required" for="governorate">المحافظة</label>
                <select id="governorate" name="governorate" class="form-select">
                    <option value="">اختر المحافظة</option>
                    @foreach (var gov in Model.Governorates)
                    {
                        <option value="@gov.Id">@gov.NameAr</option>
                    }
                </select>
                <div class="error-message" id="governorateError">يرجى اختيار المحافظة</div>
            </div>

            <!-- المنطقة -->
            <div class="form-group full-width">
                <label class="form-label required" for="area">المنطقة</label>
                <select id="area" name="area" class="form-select">
                    <option value="">اختر المنطقة</option>
                </select>
                <div class="error-message" id="areaError">يرجى اختيار المنطقة</div>
            </div>

            <!-- أقرب فرع -->
            <div class="form-group full-width">
                <label class="form-label required" for="branch">أقرب فرع</label>
                <select id="branch" name="branch" class="form-select">
                    <option value="">اختر الفرع</option>
                </select>
                <div class="error-message" id="branchError">يرجى اختيار الفرع</div>
            </div>

            <!-- الشارع -->
            <div class="form-group full-width">
                <label class="form-label required" for="street">الشارع</label>
                <input type="text" id="street" name="street" class="form-input"
                       placeholder="مثل: شارع النخلة">
                <div class="error-message" id="streetError">يرجى إدخال اسم الشارع</div>
            </div>

            <!-- تفاصيل المبنى -->
            <div class="form-group full-width">
                <label class="form-label required" for="buildingDetails">تفاصيل المبنى</label>
                <input type="text" id="buildingDetails" name="buildingDetails" class="form-input"
                       placeholder="مثل:برج النور تحته ماركت بيم">
                <div class="error-message" id="buildingDetailsError">يرجى إدخال تفاصيل المبنى</div>
            </div>

            <div class="form-row">
                <!-- الدور -->
                <div class="form-group">
                    <label class="form-label" for="floor">الدور</label>
                    <input type="text" id="floor" name="floor" class="form-input" placeholder="مثال: الأول علوي">
                </div>

                <!-- رقم الشقة -->
                <div class="form-group">
                    <label class="form-label" for="flatNumber">رقم الشقة</label>
                    <input type="text" id="flatNumber" name="flatNumber" class="form-input" placeholder="مثال: شقة 3 يمين السلم">
                </div>
            </div>

            <!-- ملاحظات -->
            <div class="form-group full-width">
                <label class="form-label" for="notes">ملاحظات إضافية</label>
                <textarea id="notes" name="notes" class="form-textarea" placeholder="مثال: اخبط على الباب من غير ما ترن الجرس"></textarea>
            </div>
        </form>

        <!-- طرق الدفع -->
        <div class="form-section fade-in">
            <div class="form-header">
                <i class="fas fa-credit-card"></i>
                <span>طرق الدفع</span>
            </div>

            <!-- الدفع عند الاستلام -->
            <div class="payment-option selected">
                <input type="radio" name="payment" value="cod" checked class="payment-radio">
                <div class="payment-info">
                    <div class="payment-title">الدفع عند الاستلام</div>
                    <div class="payment-description">يمكنك الدفع نقدًا عند استلام الطلب</div>
                </div>
            </div>

            <!-- فيزا / ماستركارد -->
            <div class="payment-option disabled">
                <input type="radio" name="payment" value="card" disabled class="payment-radio">
                <div class="payment-info">
                    <div class="payment-title">بطاقات فيزا / ماستركارد <span class="coming-soon-badge">قريباً</span></div>
                    <div class="payment-description">ستتوفر قريبًا</div>
                </div>
            </div>

            <!-- فودافون كاش -->
            <div class="payment-option disabled">
                <input type="radio" name="payment" value="vodafone" disabled class="payment-radio">
                <div class="payment-info">
                    <div class="payment-title">فودافون كاش <span class="coming-soon-badge">قريباً</span></div>
                    <div class="payment-description">ستتوفر قريبًا</div>
                </div>
            </div>

            <!-- ميزة -->
            <div class="payment-option disabled">
                <input type="radio" name="payment" value="meeza" disabled class="payment-radio">
                <div class="payment-info">
                    <div class="payment-title">ميزة <span class="coming-soon-badge">قريباً</span></div>
                    <div class="payment-description">ستتوفر قريبًا</div>
                </div>
            </div>
        </div>
    </main>

    <!-- Place Order Button -->
    <div class="place-order-container">
        <button class="place-order-btn" id="placeOrderBtn">
            <div class="btn-content">
                <i class="fas fa-shopping-bag"></i>
                <span>تأكيد الطلب</span>
            </div>
            <div class="btn-price total-amount">15.00 جنيه</div>
        </button>
    </div>

    <!-- OTP Modal -->
    <div class="modal-overlay" id="otpModal">
        <div class="otp-modal">
            <div class="otp-header">
                <div class="otp-icon">
                    <i class="fas fa-mobile-alt"></i>
                </div>
                <h2 class="otp-title">تأكيد رقم الهاتف</h2>
                <p class="otp-description">
                    تم إرسال رمز التحقق إلى رقم
                    <span class="phone-display" id="displayPhone">01xxxxxxxxx</span>
                </p>
            </div>

            <div id="otpContent">
                <div class="otp-inputs">
                    <input type="text" class="otp-input" maxlength="1" data-index="0">
                    <input type="text" class="otp-input" maxlength="1" data-index="1">
                    <input type="text" class="otp-input" maxlength="1" data-index="2">
                    <input type="text" class="otp-input" maxlength="1" data-index="3">
                </div>

                <div class="otp-timer" id="otpTimer">
                    يمكنك طلب رمز جديد خلال <span class="timer-text">60</span> ثانية
                </div>

                <div class="otp-resend">
                    <button class="resend-btn" id="resendBtn" disabled>إعادة الإرسال</button>
                </div>

                <div class="otp-error" id="otpError" style="display: none;"></div>

                <div class="otp-attempts" id="otpAttempts">
                    المحاولات المتبقية: <span id="attemptsCount">5</span>
                </div>

                <div class="otp-actions">
                    <button class="otp-btn otp-btn-cancel" id="cancelOtp">إلغاء</button>
                    <button class="otp-btn otp-btn-verify" id="verifyOtp" disabled>
                        <span class="verify-text">تحقق</span>
                    </button>
                </div>
            </div>

            <div id="blockedContent" style="display: none;">
                <div class="blocked-message">
                    <div class="blocked-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="blocked-title">تم إيقاف المحاولات مؤقتاً</div>
                    <div class="blocked-description" id="blockedDescription">
                        يرجى المحاولة مرة أخرى بعد دقيقة واحدة
                    </div>
                    <div class="otp-timer" id="blockedTimer" style="margin-top: 16px;">
                        الوقت المتبقي: <span class="timer-text" id="blockedTimeLeft">60</span> ثانية
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const CART_KEY = "food_ecom_cart";
            const OTP_ATTEMPTS_KEY = "otp_attempts";
            const OTP_DAILY_ATTEMPTS_KEY = "otp_daily_attempts";
            const OTP_BLOCK_UNTIL_KEY = "otp_block_until";
                    const VERIFIED_PHONE_KEY = "otp_verified_phone";
        const FORM_DATA_KEY = "checkout_form_data";


            // DOM Elements
            const form = document.getElementById('addressForm');
            const placeOrderBtn = document.getElementById('placeOrderBtn');
            const otpModal = document.getElementById('otpModal');
            const otpInputs = document.querySelectorAll('.otp-input');
            const displayPhone = document.getElementById('displayPhone');
            const otpTimer = document.getElementById('otpTimer');
            const resendBtn = document.getElementById('resendBtn');
            const cancelOtp = document.getElementById('cancelOtp');
            const verifyOtp = document.getElementById('verifyOtp');
            const otpError = document.getElementById('otpError');
            const attemptsCount = document.getElementById('attemptsCount');
            const otpContent = document.getElementById('otpContent');
            const blockedContent = document.getElementById('blockedContent');
            const blockedTimer = document.getElementById('blockedTimer');
            const blockedTimeLeft = document.getElementById('blockedTimeLeft');
            const blockedDescription = document.getElementById('blockedDescription');

            // Form elements
            const governorateSelect = document.getElementById('governorate');
            const areaSelect = document.getElementById('area');
            const branchSelect = document.getElementById('branch');
            const phoneInput = document.getElementById('phone');

                     const antiForgeryTokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const antiForgeryToken = antiForgeryTokenInput?.value || "";


            // OTP State
            let otpState = {
                phone: '',
                code: '',
                timer: 60,
                timerInterval: null,
                attempts: 5,
                dailyAttempts: 0,
                isBlocked: false,
                blockTimer: 0,
                blockInterval: null
            };

            // Initialize
            loadCartSummary();
            setupFormHandlers();
            setupOTPHandlers();
            checkOTPBlocked();
                restoreFormData();

              async function restoreFormData() {
            const saved = JSON.parse(localStorage.getItem(FORM_DATA_KEY) || "{}");
            if (!saved) return;

            if (saved.phone) phoneInput.value = saved.phone;

            if (saved.governorate) {
                governorateSelect.value = saved.governorate;

                // 🔹 Load areas for this governorate
                try {
                    const areasRes = await fetch(`/Cart/GetAreas?governorateId=${saved.governorate}`);
                    const areas = await areasRes.json();
                    areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';
                    areas.forEach(a => areaSelect.add(new Option(a.nameAr, a.id)));

                    if (saved.area) {
                        areaSelect.value = saved.area;

                        // 🔹 Load branches for this area
                        const branchesRes = await fetch(`/Cart/GetBranches?areaId=${saved.area}`);
                        const branches = await branchesRes.json();
                        branchSelect.innerHTML = '<option value="">اختر الفرع</option>';
                        branches.forEach(b => branchSelect.add(new Option(b.nameAr, b.id)));

                        if (saved.branch) {
                            branchSelect.value = saved.branch;
                        }
                    }
                } catch (err) {
                    console.error("Error restoring area/branch:", err);
                }
            }

            if (saved.street) document.getElementById("street").value = saved.street;
            if (saved.buildingDetails) document.getElementById("buildingDetails").value = saved.buildingDetails;
            if (saved.floor) document.getElementById("floor").value = saved.floor;
            if (saved.flatNumber) document.getElementById("flatNumber").value = saved.flatNumber;
            if (saved.notes) document.getElementById("notes").value = saved.notes;
        }




                form.addEventListener("input", () => {
            const formData = {
                phone: phoneInput.value,
                governorate: governorateSelect.value,
                area: areaSelect.value,
                branch: branchSelect.value,
                street: document.getElementById("street").value,
                buildingDetails: document.getElementById("buildingDetails").value,
                floor: document.getElementById("floor").value,
                flatNumber: document.getElementById("flatNumber").value,
                notes: document.getElementById("notes").value
            };
            localStorage.setItem(FORM_DATA_KEY, JSON.stringify(formData));
        });


            // 🔹 Load governorates, areas, branches
            function setupFormHandlers() {
                // Load governorates
                fetch("/Cart/GetGovernorates")
                    .then(res => res.json())
                    .then(governorates => {
                        governorates.forEach(g => governorateSelect.add(new Option(g.nameAr, g.id)));
                    })
                    .catch(err => console.error("Error loading governorates:", err));

                // Load areas when governorate changes
                governorateSelect.addEventListener("change", async () => {
                    areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';
                    branchSelect.innerHTML = '<option value="">اختر الفرع</option>';

                    if (!governorateSelect.value) return;

                    try {
                        const res = await fetch(`/Cart/GetAreas?governorateId=${governorateSelect.value}`);
                        const areas = await res.json();
                        areas.forEach(a => areaSelect.add(new Option(a.nameAr, a.id)));
                    } catch (err) {
                        console.error("Error loading areas:", err);
                    }
                });

                // Load branches when area changes
                areaSelect.addEventListener("change", async () => {
                    branchSelect.innerHTML = '<option value="">اختر الفرع</option>';

                    if (!areaSelect.value) return;

                    try {
                        const res = await fetch(`/Cart/GetBranches?areaId=${areaSelect.value}`);
                        const branches = await res.json();
                        branches.forEach(b => branchSelect.add(new Option(b.nameAr, b.id)));
                    } catch (err) {
                        console.error("Error loading branches:", err);
                    }
                });

                // Phone validation
                phoneInput.addEventListener('input', (e) => {
                    let value = e.target.value.replace(/\D/g, '');
                    if (value.length > 11) value = value.slice(0, 11);
                    e.target.value = value;

                    if (value.length === 11 && value.startsWith('01')) {
                        e.target.classList.remove('error');
                        document.getElementById('phoneError').classList.remove('show');
                    }
                });

                // Clear errors on input
                form.addEventListener('input', (e) => {
                    if (e.target.classList.contains('error')) {
                        e.target.classList.remove('error');
                        const errorEl = document.getElementById(e.target.name + 'Error');
                        if (errorEl) errorEl.classList.remove('show');
                    }
                });
            }

            // 🔹 Load cart summary
            function loadCartSummary() {
                try {
                    const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                    let subtotal = 0;

                    cart.forEach(item => {
                        const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) =>
                            sum + group.SelectedToppingOptions.reduce((optSum, opt) =>
                                optSum + (opt.PriceAtOrderTime * opt.Quantity), 0), 0);

                        subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                    });

                    const deliveryFee = 15;
                    const total = subtotal + deliveryFee;

                    document.querySelector('.subtotal').textContent = `${subtotal.toFixed(2)} جنيه`;
                    document.querySelector('.delivery-fee').textContent = `${deliveryFee.toFixed(2)} جنيه`;
                    document.querySelectorAll('.total-amount').forEach(el => {
                        el.textContent = `${total.toFixed(2)} جنيه`;
                    });

                } catch (error) {
                    console.error('Error loading cart:', error);
                }
            }

            // 🔹 Form validation
            function validateForm() {
                const required = ['phone', 'governorate', 'area', 'branch', 'street','floor','flatNumber', 'buildingDetails'];
                let isValid = true;

                required.forEach(field => {
                    const input = document.querySelector(`[name="${field}"]`);
                    const errorEl = document.getElementById(field + 'Error');

                    if (!input.value.trim()) {
                        input.classList.add('error');
                        if (errorEl) errorEl.classList.add('show');
                        isValid = false;
                    } else if (field === 'phone') {
                        const phoneValid = /^01[0-9]{9}$/.test(input.value);
                        if (!phoneValid) {
                            input.classList.add('error');
                            if (errorEl) {
                                errorEl.classList.add('show');
                                errorEl.textContent = 'رقم الهاتف يجب أن يبدأ بـ 01 ويحتوي على 11 رقم';
                            }
                            isValid = false;
                        } else {
                            input.classList.remove('error');
                            if (errorEl) errorEl.classList.remove('show');
                        }
                    } else {
                        input.classList.remove('error');
                        if (errorEl) errorEl.classList.remove('show');
                    }
                });

                return isValid;
            }

            // 🔹 Check if OTP is blocked
            function checkOTPBlocked() {
                const blockUntil = localStorage.getItem(OTP_BLOCK_UNTIL_KEY);
                if (blockUntil) {
                    const blockTime = new Date(blockUntil);
                    if (new Date() < blockTime) {
                        otpState.isBlocked = true;
                        const remainingTime = Math.ceil((blockTime - new Date()) / 1000);

                        if (remainingTime > 3600) { // More than 1 hour = daily block
                            blockedDescription.textContent = 'تم تجاوز الحد الأقصى للمحاولات اليومية. يرجى المحاولة غداً';
                            blockedTimer.style.display = 'none';
                        } else {
                            otpState.blockTimer = remainingTime;
                            startBlockTimer();
                        }
                        return true;
                    } else {
                        localStorage.removeItem(OTP_BLOCK_UNTIL_KEY);
                    }
                }

                // Check daily attempts
                const dailyKey = `${OTP_DAILY_ATTEMPTS_KEY}_${new Date().toDateString()}`;
                const dailyAttempts = parseInt(localStorage.getItem(dailyKey) || '0');
                otpState.dailyAttempts = dailyAttempts;

                return false;
            }

            // 🔹 Setup OTP handlers
            function setupOTPHandlers() {
                // Place order button click
                placeOrderBtn.addEventListener('click', async (e) => {
                    e.preventDefault();

                    if (!validateForm()) return;

                        const savedVerifiedPhone = localStorage.getItem(VERIFIED_PHONE_KEY);
        if (savedVerifiedPhone === phoneInput.value) {
            await completeOrder();
            return;
        }

                    if (checkOTPBlocked()) {
                        showOTPModal();
                        return;
                    }

                    if (otpState.dailyAttempts >= 10) {
                        blockUntilTomorrow();
                        return;
                    }

                    // Show loading
                    const btnText = placeOrderBtn.querySelector('.btn-content span');
                    const originalText = btnText.textContent;
                    btnText.innerHTML = '<div class="loading-spinner"></div> جاري الإرسال...';
                    placeOrderBtn.disabled = true;

                    try {
                        // Simulate sending OTP
                        await sendOTP();

                        otpState.phone = phoneInput.value;
                        displayPhone.textContent = maskPhone(otpState.phone);

                        // Reset attempts for new session
                        otpState.attempts = 5;
                        attemptsCount.textContent = otpState.attempts;

                        showOTPModal();
                        startOTPTimer();

                    } catch (error) {
                        console.error('Error sending OTP:', error);
                        showToast('حدث خطأ في إرسال رمز التحقق. حاول مرة أخرى', 'error');
                    } finally {
                        btnText.textContent = originalText;
                        placeOrderBtn.disabled = false;
                    }
                });

                // OTP input handling
                otpInputs.forEach((input, index) => {
                    input.addEventListener('input', (e) => {
                        const value = e.target.value.replace(/\D/g, '');
                        e.target.value = value;

                        if (value && index < otpInputs.length - 1) {
                            otpInputs[index + 1].focus();
                        }

                        updateOTPCode();
                        clearOTPError();
                    });

                    input.addEventListener('keydown', (e) => {
                        if (e.key === 'Backspace' && !e.target.value && index > 0) {
                            otpInputs[index - 1].focus();
                        }
                    });

                    input.addEventListener('paste', (e) => {
                        e.preventDefault();
                        const paste = e.clipboardData.getData('text').replace(/\D/g, '').slice(0, 4);

                        otpInputs.forEach((inp, i) => {
                            inp.value = paste[i] || '';
                        });

                        updateOTPCode();
                    });
                });

                // Resend OTP
                resendBtn.addEventListener('click', async () => {
                    if (otpState.dailyAttempts >= 10) {
                        blockUntilTomorrow();
                        return;
                    }

                    resendBtn.disabled = true;
                    const originalText = resendBtn.textContent;
                    resendBtn.textContent = 'جاري الإرسال...';

                    try {
                        await sendOTP();
                        clearOTPInputs();
                        clearOTPError();
                        startOTPTimer();
                        showToast('تم إرسال رمز جديد', 'success');
                    } catch (error) {
                        showToast('حدث خطأ في الإرسال', 'error');
                    } finally {
                        resendBtn.textContent = originalText;
                    }
                });

                // Verify OTP
                verifyOtp.addEventListener('click', async () => {
                    if (!otpState.code || otpState.code.length !== 4) {
                        showOTPError('يرجى إدخال رمز التحقق كاملاً');
                        return;
                    }

                    const verifyText = verifyOtp.querySelector('.verify-text');
                    const originalText = verifyText.textContent;
                    verifyText.innerHTML = '<div class="loading-spinner"></div> جاري التحقق...';
                    verifyOtp.disabled = true;

                    try {
                        const isValid = await verifyOTPCode(otpState.code);

                        if (isValid) {
                            // Success - proceed with order
                            hideOTPModal();
                                localStorage.setItem("otp_verified_phone", otpState.phone);
                            await completeOrder();
                        } else {
                            // Failed verification
                            otpState.attempts--;
                            attemptsCount.textContent = otpState.attempts;

                            if (otpState.attempts <= 0) {
                                blockFor1Minute();
                                return;
                            }

                            showOTPError(`رمز التحقق غير صحيح. المحاولات المتبقية: ${otpState.attempts}`);
                            clearOTPInputs();
                            markOTPInputsError();
                        }

                    } catch (error) {
                        showOTPError('حدث خطأ في التحقق. حاول مرة أخرى');
                    } finally {
                        verifyText.textContent = originalText;
                        verifyOtp.disabled = false;
                    }
                });

                // Cancel OTP
                cancelOtp.addEventListener('click', () => {
                    hideOTPModal();
                });

                // Close modal on overlay click
                otpModal.addEventListener('click', (e) => {
                    if (e.target === otpModal) {
                        hideOTPModal();
                    }
                });
            }

            // 🔹 OTP Functions
            async function sendOTP() {
                // Simulate API call
                return new Promise((resolve) => {
                    setTimeout(() => {
                        otpState.code = '1234'; // In real app, this comes from backend
                        console.log('OTP sent:', otpState.code); // For testing

                        // Increment daily attempts
                        const dailyKey = `${OTP_DAILY_ATTEMPTS_KEY}_${new Date().toDateString()}`;
                        const dailyAttempts = parseInt(localStorage.getItem(dailyKey) || '0') + 1;
                        localStorage.setItem(dailyKey, dailyAttempts.toString());
                        otpState.dailyAttempts = dailyAttempts;

                        resolve();
                    }, 1500);
                });
            }

            async function verifyOTPCode(code) {
                // Simulate API call
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve(code === '1234'); // In real app, verify with backend
                    }, 1000);
                });
            }

            function updateOTPCode() {
                otpState.code = Array.from(otpInputs).map(input => input.value).join('');
                verifyOtp.disabled = otpState.code.length !== 4;
            }

            function clearOTPInputs() {
                otpInputs.forEach(input => {
                    input.value = '';
                    input.classList.remove('error', 'success');
                });
                otpState.code = '';
                verifyOtp.disabled = true;
            }

            function markOTPInputsError() {
                otpInputs.forEach(input => input.classList.add('error'));
                setTimeout(() => {
                    otpInputs.forEach(input => input.classList.remove('error'));
                }, 2000);
            }

            function clearOTPError() {
                otpError.style.display = 'none';
                otpError.textContent = '';
            }

            function showOTPError(message) {
                otpError.textContent = message;
                otpError.style.display = 'block';
            }

            function maskPhone(phone) {
                return phone.replace(/(\d{3})(\d{4})(\d{4})/, '$1****$3');
            }

            function showOTPModal() {
                if (otpState.isBlocked) {
                    otpContent.style.display = 'none';
                    blockedContent.style.display = 'block';
                } else {
                    otpContent.style.display = 'block';
                    blockedContent.style.display = 'none';
                }

                otpModal.classList.add('show');
                document.body.style.overflow = 'hidden';

                setTimeout(() => {
                    if (!otpState.isBlocked) {
                        otpInputs[0].focus();
                    }
                }, 100);
            }

            function hideOTPModal() {
                otpModal.classList.remove('show');
                document.body.style.overflow = '';
                clearInterval(otpState.timerInterval);
                clearInterval(otpState.blockInterval);
                clearOTPInputs();
                clearOTPError();
            }

            function startOTPTimer() {
                otpState.timer = 60;
                resendBtn.disabled = true;

                otpState.timerInterval = setInterval(() => {
                    otpState.timer--;
                    otpTimer.querySelector('.timer-text').textContent = otpState.timer;

                    if (otpState.timer <= 0) {
                        clearInterval(otpState.timerInterval);
                        otpTimer.textContent = 'انتهت صلاحية الرمز';
                        resendBtn.disabled = false;
                    }
                }, 1000);
            }

            function blockFor1Minute() {
                otpState.isBlocked = true;
                otpState.blockTimer = 60;

                const blockUntil = new Date();
                blockUntil.setMinutes(blockUntil.getMinutes() + 1);
                localStorage.setItem(OTP_BLOCK_UNTIL_KEY, blockUntil.toISOString());

                otpContent.style.display = 'none';
                blockedContent.style.display = 'block';
                blockedDescription.textContent = 'تم إيقاف المحاولات مؤقتاً لتجاوز الحد الأقصى';
                blockedTimer.style.display = 'block';

                startBlockTimer();
            }

            function blockUntilTomorrow() {
                otpState.isBlocked = true;

                const blockUntil = new Date();
                blockUntil.setDate(blockUntil.getDate() + 1);
                blockUntil.setHours(0, 0, 0, 0);
                localStorage.setItem(OTP_BLOCK_UNTIL_KEY, blockUntil.toISOString());

                otpContent.style.display = 'none';
                blockedContent.style.display = 'block';
                blockedDescription.textContent = 'تم تجاوز الحد الأقصى للمحاولات اليومية (10 محاولات). يرجى المحاولة غداً';
                blockedTimer.style.display = 'none';

                showOTPModal();
            }

            function startBlockTimer() {
                blockedTimeLeft.textContent = otpState.blockTimer;

                otpState.blockInterval = setInterval(() => {
                    otpState.blockTimer--;
                    blockedTimeLeft.textContent = otpState.blockTimer;

                    if (otpState.blockTimer <= 0) {
                        clearInterval(otpState.blockInterval);
                        localStorage.removeItem(OTP_BLOCK_UNTIL_KEY);
                        otpState.isBlocked = false;
                        otpState.attempts = 5;
                        hideOTPModal();
                        showToast('يمكنك الآن المحاولة مرة أخرى', 'success');
                    }
                }, 1000);
            }

                         // Replace the completeOrder function with this:
        async function completeOrder() {
            const btnText = placeOrderBtn.querySelector('.btn-content span');
            const originalText = btnText.textContent;

            // Show loading state
            btnText.innerHTML = '<div class="loading-spinner"></div> جاري المعالجة...';
            placeOrderBtn.disabled = true;

            try {
                // ✅ Get cart from localStorage
                const cart = JSON.parse(localStorage.getItem("food_ecom_cart")) || [];

                if (cart.length === 0) {
                    showErrorMessage("سلة التسوق فارغة", "error");
                    return;
                }

                // ✅ Calculate totals
                let subtotal = 0;
                cart.forEach(item => {
                    const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) =>
                        sum + group.SelectedToppingOptions.reduce((optSum, opt) =>
                            optSum + (opt.PriceAtOrderTime * opt.Quantity), 0), 0);
                    subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                });

                const deliveryFees = 15;
                const grandTotal = subtotal + deliveryFees;

                // ✅ Build payload
                const payload = {
                    phoneNumber: document.getElementById('phone').value,
                    governrateId: +document.getElementById('governorate').value,
                    areaId: +document.getElementById('area').value,
                    branchId: +document.getElementById('branch').value,
                    address: document.getElementById('street').value,
                    buildingDetails: document.getElementById('buildingDetails').value,
                    floor: document.getElementById('floor').value || '',
                    flatNumber: document.getElementById('flatNumber').value || '',
                    notes: document.getElementById('notes').value || '',
                    subTotal: subtotal,
                    deliveryFees: deliveryFees,
                    grandTotal: grandTotal,
                    items: cart, // ✅ already array
                    payment: {
                        amount: grandTotal,
                        paymentMethod: 1, // CashOnDelivery
                        paymentStatus: 1  // Pending
                    }
                };

                // ✅ Send request
                const response = await fetch('/Order/CreateOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken // CSRF
                    },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (result.success) {
                    localStorage.removeItem("food_ecom_cart");

                    // ✅ Smooth transition before redirect
                    document.body.style.transition = "opacity 0.6s ease, transform 0.6s ease";
                    document.body.style.opacity = "0";
                    document.body.style.transform = "translateY(20px)";

                    setTimeout(() => {
                        // window.location.href = '/Home/Index?orderConfirmed=true&orderId=' + result.orderId;
                        window.location.href = '/Home/Index' ;
                    }, 600);
                } else {
                    // ❌ Show server error
                    showErrorMessage(result.message);
                }

            } catch (error) {
                                    showErrorMessage(error);

                // showErrorMessage("حدث خطأ في معالجة الطلب. حاول مرة أخرى", "error");
            } finally {
                // ✅ Reset button state
                btnText.textContent = originalText;
                placeOrderBtn.disabled = false;
            }
        }

        // 🔹 Reusable alert (toast / modal / fallback to alert)
        function showAlert(message, type = "info") {
            if (window.Swal) {
                // SweetAlert2 if available
                Swal.fire({
                    icon: type,
                    title: message,
                    confirmButtonText: "موافق"
                });
            } else {
                alert(message);
            }
        }
                        function showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `toast ${type} show`;
                toast.innerHTML = `
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                    <span>${message}</span>
                `;

                document.body.appendChild(toast);

                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 4000);
            }
        });
    </script>
</body>
</html>