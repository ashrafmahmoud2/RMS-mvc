@using RMS.Web.Core.ViewModels.GovernateAreaBranch
@model CheckoutViewModel


<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>الدفع وتأكيد الطلب</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Enhanced Color Palette */
            --primary-color: #185499;
            --primary-dark: #0f3d7a;
            --primary-light: #3e7bb5;
            --primary-ultra-light: rgba(24, 84, 153, 0.05);
            --success-color: #10b981;
            --success-light: rgba(16, 185, 129, 0.1);
            --danger-color: #ef4444;
            --danger-light: rgba(239, 68, 68, 0.1);
            --warning-color: #f59e0b;
            --warning-light: rgba(245, 158, 11, 0.1);
            --info-color: #3b82f6;
            --info-light: rgba(59, 130, 246, 0.1);
            /* Surface Colors */
            --background: #f8fafc;
            --surface: #ffffff;
            --surface-hover: #f1f5f9;
            --surface-active: #e2e8f0;
            --surface-elevated: #ffffff;
            /* Border & Text */
            --border: #e2e8f0;
            --border-light: #f1f5f9;
            --border-focus: #3b82f6;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --text-muted: #94a3b8;
            --text-disabled: #cbd5e1;
            /* Shadows */
            --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.05);
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 8px 25px rgba(0, 0, 0, 0.15);
            --shadow-xl: 0 12px 40px rgba(0, 0, 0, 0.2);
            /* Border Radius */
            --radius-sm: 8px;
            --radius: 12px;
            --radius-lg: 16px;
            --radius-xl: 24px;
            --radius-full: 9999px;
            /* Transitions */
            --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            --transition-bounce: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
            --transition-smooth: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            /* Spacing */
            --space-xs: 4px;
            --space-sm: 8px;
            --space: 12px;
            --space-md: 16px;
            --space-lg: 20px;
            --space-xl: 24px;
            --space-2xl: 32px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

            *::before,
            *::after {
                box-sizing: border-box;
            }

        html {
            scroll-behavior: smooth;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        body {
            font-family: 'Cairo', 'Segoe UI', Tahoma, Arial, sans-serif;
            background: var(--background);
            color: var(--text-primary);
            line-height: 1.6;
            min-height: 100vh;
            padding-bottom: 120px;
            font-feature-settings: "kern" 1;
            text-rendering: optimizeLegibility;
        }

        /* Enhanced Header */
        .checkout-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            padding: var(--space-md) 0;
            box-shadow: var(--shadow-lg);
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(20px);
            border-bottom-left-radius: var(--radius-2xl);
            border-bottom-right-radius: var(--radius-2xl);
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 var(--space-lg);
            max-width: 1200px;
            margin: 0 auto;
        }

        .header-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
            padding: var(--space);
            transition: var(--transition-bounce);
            border-radius: var(--radius-full);
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
            position: relative;
            overflow: hidden;
        }

            .header-btn::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(255, 255, 255, 0.2);
                border-radius: inherit;
                opacity: 0;
                transform: scale(0.8);
                transition: var(--transition);
            }

            .header-btn:hover::before {
                opacity: 1;
                transform: scale(1);
            }

            .header-btn:hover {
                transform: translateY(-2px);
            }

            .header-btn:active {
                transform: translateY(0);
            }

        .header-title {
            color: white;
            font-size: 18px;
            font-weight: 600;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Enhanced Main Container */
        .main-container {
            max-width: 800px;
            margin: 0 auto;
            padding: var(--space-lg);
        }

        /* Enhanced Progress Steps */
        .progress-container {
            background: var(--surface-elevated);
            border-radius: var(--radius-xl);
            padding: var(--space-xl);
            margin-bottom: var(--space-xl);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-light);
            position: relative;
            overflow: hidden;
        }

            .progress-container::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: linear-gradient(90deg, var(--primary-color), var(--success-color));
            }

        .progress-steps {
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: relative;
        }

        .progress-line {
            position: absolute;
            top: 24px;
            left: 24px;
            right: 24px;
            height: 3px;
            background: var(--border);
            z-index: 1;
            border-radius: var(--radius-sm);
        }

        .progress-line-active {
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--success-color));
            width: 50%;
            transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: var(--radius-sm);
            box-shadow: 0 0 20px rgba(24, 84, 153, 0.3);
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 2;
            flex: 1;
        }

        .step-circle {
            width: 48px;
            height: 48px;
            border-radius: var(--radius-full);
            background: var(--surface);
            border: 3px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: var(--text-muted);
            transition: var(--transition-bounce);
            font-size: 16px;
            position: relative;
            overflow: hidden;
        }

        .step.active .step-circle {
            background: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            transform: scale(1.1);
            box-shadow: 0 0 0 4px var(--primary-ultra-light), var(--shadow);
            animation: pulse-ring 2s infinite;
        }

        .step.completed .step-circle {
            background: var(--success-color);
            border-color: var(--success-color);
            color: white;
            animation: success-bounce 0.6s ease-out;
        }

        @@keyframes pulse-ring {
            0% {
                box-shadow: 0 0 0 0 rgba(24, 84, 153, 0.4), var(--shadow);
            }

            70% {
                box-shadow: 0 0 0 20px rgba(24, 84, 153, 0), var(--shadow);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(24, 84, 153, 0), var(--shadow);
            }
        }

        @@keyframes success-bounce {
            0% {
                transform: scale(0.8);
            }

            50% {
                transform: scale(1.2);
            }

            100% {
                transform: scale(1);
            }
        }

        .step-label {
            margin-top: var(--space);
            font-size: 13px;
            font-weight: 500;
            color: var(--text-muted);
            text-align: center;
            transition: var(--transition);
        }

        .step.active .step-label,
        .step.completed .step-label {
            color: var(--text-primary);
            font-weight: 600;
        }

        /* Enhanced Cards */
        .card {
            background: var(--surface-elevated);
            border-radius: var(--radius-xl);
            padding: var(--space-xl);
            margin-bottom: var(--space-xl);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-light);
            position: relative;
            overflow: hidden;
            transition: var(--transition);
        }

            .card:hover {
                box-shadow: var(--shadow);
                transform: translateY(-2px);
            }

            .card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
                opacity: 0;
                transition: var(--transition);
            }

            .card:hover::before {
                opacity: 1;
            }

        /* Order Summary Card */
        .order-summary {
            background: var(--surface-elevated);
            border-radius: var(--radius-xl);
            padding: var(--space-xl);
            margin-bottom: var(--space-xl);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-light);
            position: relative;
            overflow: hidden;
        }

            .order-summary::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
            }

        .summary-header {
            display: flex;
            align-items: center;
            gap: var(--space);
            margin-bottom: var(--space-lg);
            color: var(--primary-color);
            font-size: 18px;
            font-weight: 600;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--space) 0;
            border-bottom: 1px solid var(--border-light);
            transition: var(--transition);
            position: relative;
        }

            .summary-item:hover {
                background: var(--surface-hover);
                margin: 0 -12px;
                padding-left: var(--space);
                padding-right: var(--space);
                border-radius: var(--radius);
            }

            .summary-item:last-child {
                border-bottom: none;
                font-weight: 600;
                font-size: 18px;
                color: var(--primary-color);
                background: var(--primary-ultra-light);
                margin: var(--space) -12px -12px;
                padding: var(--space-md) var(--space) var(--space);
                border-radius: 0 0 var(--radius-xl) var(--radius-xl);
            }

        /* Enhanced Form Styles */
        .form-section {
            background: var(--surface-elevated);
            border-radius: var(--radius-xl);
            padding: var(--space-2xl);
            box-shadow: var(--shadow-sm);
            margin-bottom: var(--space-xl);
            border: 1px solid var(--border-light);
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

            .form-section::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, var(--primary-color), var(--primary-light));
                opacity: 0;
                transition: var(--transition);
            }

            .form-section:hover::before {
                opacity: 1;
            }

            .form-section:hover {
                box-shadow: var(--shadow);
            }

        .form-header {
            display: flex;
            align-items: center;
            gap: var(--space);
            margin-bottom: var(--space-xl);
            color: var(--primary-color);
            font-size: 20px;
            font-weight: 600;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--space-lg);
            margin-bottom: var(--space-lg);
        }

        .form-group {
            position: relative;
        }

            .form-group.full-width {
                grid-column: 1 / -1;
            }

        .form-label {
            display: block;
            margin-bottom: var(--space-sm);
            font-weight: 500;
            color: var(--text-primary);
            font-size: 14px;
            transition: var(--transition);
        }

            .form-label.required::after {
                content: " *";
                color: var(--danger-color);
            }

        .form-input,
        .form-select,
        .form-textarea {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid var(--border);
            border-radius: var(--radius);
            font-size: 15px;
            transition: var(--transition);
            background: var(--surface);
            color: var(--text-primary);
            font-family: inherit;
            position: relative;
        }

            .form-input:focus,
            .form-select:focus,
            .form-textarea:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 4px var(--primary-ultra-light);
                transform: translateY(-1px);
            }

            .form-input.error,
            .form-select.error,
            .form-textarea.error {
                border-color: var(--danger-color);
                box-shadow: 0 0 0 4px var(--danger-light);
                animation: shake 0.4s ease-in-out;
            }

        @@keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-4px);
            }

            75% {
                transform: translateX(4px);
            }
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
            font-family: inherit;
        }

        .error-message {
            color: var(--danger-color);
            font-size: 12px;
            margin-top: 6px;
            display: flex;
            align-items: center;
            gap: 4px;
            opacity: 0;
            transform: translateY(-4px);
            transition: var(--transition);
        }

            .error-message.show {
                opacity: 1;
                transform: translateY(0);
            }

        /* Enhanced Payment Options */
        .payment-option {
            display: flex;
            align-items: center;
            gap: var(--space-md);
            padding: var(--space-lg);
            border: 2px solid var(--border);
            border-radius: var(--radius-lg);
            margin-bottom: var(--space-md);
            cursor: pointer;
            transition: var(--transition);
            background: var(--surface);
            position: relative;
            overflow: hidden;
        }

            .payment-option::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: var(--primary-ultra-light);
                opacity: 0;
                transition: var(--transition);
            }

            .payment-option:hover:not(.disabled)::before {
                opacity: 1;
            }

            .payment-option:hover:not(.disabled) {
                border-color: var(--primary-color);
                transform: translateY(-2px);
                box-shadow: var(--shadow);
            }

            .payment-option.selected {
                border-color: var(--primary-color);
                background: var(--primary-ultra-light);
                box-shadow: 0 0 0 4px var(--primary-ultra-light);
            }

            .payment-option.disabled {
                opacity: 0.5;
                cursor: not-allowed;
                background: var(--surface-hover);
            }

        .payment-radio {
            width: 20px;
            height: 20px;
            accent-color: var(--primary-color);
            position: relative;
            z-index: 1;
        }

        .payment-info {
            flex: 1;
            position: relative;
            z-index: 1;
        }

        .payment-title {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 4px;
            display: flex;
            align-items: center;
            gap: var(--space-sm);
        }

        .payment-description {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .coming-soon-badge {
            background: var(--warning-color);
            color: white;
            padding: 2px 8px;
            border-radius: var(--radius-sm);
            font-size: 10px;
            font-weight: 500;
            text-transform: uppercase;
        }

        /* Enhanced Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(8px);
            z-index: 1000;
            display: none;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease-out;
            padding: var(--space-lg);
        }

            .modal-overlay.show {
                display: flex;
            }

        .otp-modal {
            background: var(--surface-elevated);
            border-radius: var(--radius-xl);
            padding: var(--space-2xl);
            max-width: 400px;
            width: 100%;
            box-shadow: var(--shadow-xl);
            border: 1px solid var(--border-light);
            position: relative;
            animation: slideUp 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        .otp-header {
            text-align: center;
            margin-bottom: var(--space-xl);
        }

        .otp-icon {
            width: 64px;
            height: 64px;
            background: var(--primary-color);
            border-radius: var(--radius-full);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto var(--space-md);
            font-size: 24px;
            color: white;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(24, 84, 153, 0.4);
            }

            70% {
                box-shadow: 0 0 0 20px rgba(24, 84, 153, 0);
            }

            100% {
                box-shadow: 0 0 0 0 rgba(24, 84, 153, 0);
            }
        }

        .otp-title {
            font-size: 22px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: var(--space-sm);
        }

        .otp-description {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .phone-display {
            color: var(--primary-color);
            font-weight: 600;
        }

        .otp-inputs {
            display: flex;
            gap: var(--space);
            justify-content: center;
            margin: var(--space-xl) 0;
            direction: ltr;
        }

        .otp-input {
            width: 48px;
            height: 48px;
            border: 2px solid var(--border);
            border-radius: var(--radius);
            text-align: center;
            font-size: 20px;
            font-weight: 600;
            background: var(--surface);
            color: var(--text-primary);
            transition: var(--transition);
        }

            .otp-input:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 4px var(--primary-ultra-light);
                transform: scale(1.05);
            }

            .otp-input.error {
                border-color: var(--danger-color);
                animation: shake 0.4s ease-in-out;
            }

            .otp-input.success {
                border-color: var(--success-color);
                background: var(--success-light);
            }

        /* Enhanced Button */
        .place-order-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: var(--space-md) var(--space-lg);
            box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.1);
            z-index: 50;
            border-top: 1px solid var(--border-light);
        }

        .place-order-btn {
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            border-radius: var(--radius-lg);
            padding: 18px 24px;
            cursor: pointer;
            transition: var(--transition-bounce);
            box-shadow: var(--shadow);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 16px;
            font-weight: 600;
            font-family: inherit;
            position: relative;
            overflow: hidden;
        }

            .place-order-btn::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(135deg, var(--primary-light) 0%, var(--primary-color) 100%);
                opacity: 0;
                transition: var(--transition);
            }

            .place-order-btn:hover:not(:disabled)::before {
                opacity: 1;
            }

            .place-order-btn:hover:not(:disabled) {
                transform: translateY(-3px);
                box-shadow: var(--shadow-xl);
            }

            .place-order-btn:active:not(:disabled) {
                transform: translateY(-1px);
            }

            .place-order-btn:disabled {
                opacity: 0.7;
                cursor: not-allowed;
                transform: none;
            }

        .btn-content {
            display: flex;
            align-items: center;
            gap: var(--space);
            position: relative;
            z-index: 1;
        }

        .btn-price {
            font-size: 18px;
            font-weight: 700;
            position: relative;
            z-index: 1;
        }

        /* Loading Spinner */
        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: var(--radius-full);
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Enhanced Animations */
        .fade-in {
            animation: fadeIn 0.6s ease-out;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .slide-up {
            animation: slideUp 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(40px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .page-exit {
            animation: fadeOut 0.6s ease forwards;
        }

        @@keyframes fadeOut {
            from {
                opacity: 1;
                transform: translateY(0);
            }

            to {
                opacity: 0;
                transform: translateY(30px);
            }
        }

        .is-invalid {
            border: 2px solid red !important;
            background-color: #ffe6e6;
            animation: shake 0.3s;
        }

        @@keyframes shake {
            0% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-4px);
            }

            50% {
                transform: translateX(4px);
            }

            75% {
                transform: translateX(-4px);
            }

            100% {
                transform: translateX(0);
            }
        }


        /* Enhanced Responsive Design */
        @@media (max-width: 768px) {
            .main-container {
                padding: var(--space-md);
            }

            .form-row {
                grid-template-columns: 1fr;
                gap: var(--space-md);
            }

            .progress-steps {
                gap: var(--space-sm);
            }

            .step-label {
                font-size: 11px;
            }

            .step-circle {
                width: 40px;
                height: 40px;
                font-size: 14px;
            }

            .form-section {
                padding: var(--space-lg);
            }

            .header-title {
                font-size: 16px;
            }

            .otp-modal {
                padding: var(--space-xl);
                margin: var(--space-lg);
            }

            .otp-inputs {
                gap: var(--space-sm);
            }

            .otp-input {
                width: 40px;
                height: 40px;
            }

            .place-order-btn {
                padding: var(--space-md) var(--space-lg);
            }

            .btn-content {
                gap: var(--space-sm);
            }
        }

        @@media (max-width: 480px) {
            .header-container {
                padding: 0 var(--space-md);
            }

            .main-container {
                padding: var(--space);
            }

            .progress-container,
            .form-section,
            .order-summary {
                padding: var(--space-lg);
                margin-bottom: var(--space-lg);
            }

            .otp-modal {
                margin: var(--space);
            }
        }

        /* Enhanced Focus States */
        .form-input:focus-visible,
        .form-select:focus-visible,
        .form-textarea:focus-visible,
        .otp-input:focus-visible {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        /* Enhanced Selection States */
        ::selection {
            background: var(--primary-ultra-light);
            color: var(--primary-dark);
        }

        /* Accessibility Improvements */
        .visually-hidden {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        /* High contrast mode support */
        @@media (prefers-contrast: high) {
            : root {
                --border: #000000;
                --text-primary: #000000;
                --text-secondary: #000000;
            }
        }

        /* Reduced motion support */
        @@media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
    </style>
</head>

<body>
    <header class="checkout-header">
        <div class="header-container">
            <button class="header-btn" onclick="window.history.back()" aria-label="العودة للصفحة السابقة">
                <i class="fa-solid fa-chevron-right" aria-hidden="true"></i>
            </button>
            <h1 class="header-title">تأكيد الطلب والدفع</h1>
            <div aria-hidden="true"></div>
        </div>
    </header>

    <main class="main-container" role="main">
        <!-- Progress Steps -->
        <section class="progress-container fade-in" aria-labelledby="progress-title">
            <h2 id="progress-title" class="visually-hidden">مراحل إتمام الطلب</h2>
            <div class="progress-steps" role="progressbar" aria-valuenow="2" aria-valuemin="1" aria-valuemax="3">
                <div class="progress-line">
                    <div class="progress-line-active"></div>
                </div>
                <div class="step completed" aria-label="مرحلة مكتملة">
                    <div class="step-circle">
                        <i class="fas fa-check" aria-hidden="true"></i>
                    </div>
                    <div class="step-label">السلة</div>
                </div>
                <div class="step active" aria-label="المرحلة الحالية">
                    <div class="step-circle">2</div>
                    <div class="step-label">العنوان والتوصيل</div>
                </div>
                <div class="step" aria-label="مرحلة قادمة">
                    <div class="step-circle">3</div>
                    <div class="step-label">الدفع</div>
                </div>
            </div>
        </section>

        <!-- Order Summary -->
        <section class="order-summary fade-in" aria-labelledby="summary-title">
            <div class="summary-header">
                <i class="fas fa-receipt" aria-hidden="true"></i>
                <h2 id="summary-title">ملخص الطلب</h2>
            </div>
            <div class="summary-item">
                <span>المجموع الفرعي</span>
                <span class="subtotal" aria-label="المجموع الفرعي">0.00 جنيه</span>
            </div>
            <div class="summary-item">

                <span>رسوم التوصيل</span>
                <span class="delivery-fee" aria-label="رسوم التوصيل">15.00 جنيه</span>
            </div>
            <div class="summary-item">
                <span>الإجمالي</span>
                <span class="total-amount" aria-label="المبلغ الإجمالي">15.00 جنيه</span>
            </div>
        </section>

        <!-- Delivery Address Form -->
        <section class="form-section fade-in" aria-labelledby="address-title">
            <form asp-controller="Order" asp-action="CreateOrder" id="addressForm" novalidate>
                @*    @Html.AntiForgeryToken(); *@

                @*                 <input type="hidden" id="ItemsJson"  asp-for="Order.Items" />
 *@                <input type="hidden" id="ItemsJson" name="ItemsJson" />


                <div class="form-header">
                    <i class="fas fa-map-marker-alt" aria-hidden="true"></i>
                    <h2 id="address-title">عنوان التوصيل</h2>
                </div>

                <!-- Phone Number -->
                <div class="form-group full-width">
                    <label class="form-label required" asp-for="Order.PhoneNumber">رقم الهاتف</label>
                    <input asp-for="Order.PhoneNumber"
                           class="form-input"
                           placeholder="01xxxxxxxxx"
                           maxlength="11"
                           required
                           inputmode="tel"
                           autocomplete="tel"
                           aria-describedby="phone-help phone-error" />
                    <div id="phone-help" class="visually-hidden">أدخل رقم هاتف مصري صحيح يبدأ بـ 01</div>
                    <span id="phone-error" asp-validation-for="Order.PhoneNumber" class="error-message text-danger" role="alert"></span>
                </div>

                <!-- Governorate -->
                <div class="form-group full-width">
                    <label class="form-label required" asp-for="Order.GovernrateId">المحافظة</label>
                    <select asp-for="Order.GovernrateId"
                            asp-items="@(new SelectList(Model.Governorates, "Id", "NameAr"))"
                            class="form-select"
                            required
                            aria-describedby="governorate-error">
                        <option value="">اختر المحافظة</option>
                    </select>
                    <span id="governorate-error" asp-validation-for="Order.GovernrateId" class="error-message text-danger" role="alert"></span>
                </div>

                <!-- Area -->
                <div class="form-group full-width">
                    <label class="form-label required" asp-for="Order.AreaId">المنطقة</label>
                    <select asp-for="Order.AreaId" class="form-select" required aria-describedby="area-error">
                        <option value="">اختر المنطقة</option>
                    </select>
                    <span id="area-error" asp-validation-for="Order.AreaId" class="error-message text-danger" role="alert"></span>
                </div>

                <!-- Branch -->
                <div class="form-group full-width">
                    <label class="form-label required" asp-for="Order.BranchId">أقرب فرع</label>
                    <select asp-for="Order.BranchId" class="form-select" required aria-describedby="branch-error">
                        <option value="">اختر الفرع</option>
                    </select>
                    <span id="branch-error" asp-validation-for="Order.BranchId" class="error-message text-danger" role="alert"></span>
                </div>

                <!-- Street Address -->
                <div class="form-group full-width">
                    <label class="form-label required" asp-for="Order.Address">الشارع</label>
                    <input asp-for="Order.Address"
                           class="form-input" required
                           placeholder="مثل: شارع النخلة"
                           autocomplete="street-address"
                           aria-describedby="address-error" />
                    <span id="address-error" asp-validation-for="Order.Address" class="error-message text-danger" role="alert"></span>
                </div>

                <!-- Building Details -->
                <div class="form-group full-width">
                    <label class="form-label required" asp-for="Order.BuildingDetails">تفاصيل المبنى</label>
                    <input asp-for="Order.BuildingDetails"
                           class="form-input"
                           required
                           placeholder="مثل: برج النور تحته ماركت بيم"
                           aria-describedby="building-error" />
                    <span id="building-error" asp-validation-for="Order.BuildingDetails" class="error-message text-danger" role="alert"></span>
                </div>

                <div class="form-row">
                    <!-- Floor -->
                    <div class="form-group">
                        <label class="form-label" asp-for="Order.Floor">الدور</label>
                        <input asp-for="Order.Floor"
                               class="form-input"
                               placeholder="مثال: الأول علوي"
                               aria-describedby="floor-error" />
                        <span @* id="floor-error" *@ asp-validation-for="Order.Floor" class="error-message text-danger" role="alert"></span>
                    </div>

                    <!-- Flat Number -->
                    <div class="form-group">
                        <label class="form-label" asp-for="Order.FlatNumber">رقم الشقة</label>
                        <input asp-for="Order.FlatNumber"
                               class="form-input"
                               placeholder="مثال: شقة 3 يمين السلم"
                               aria-describedby="flat-error" />
                        <span id="flat-error" asp-validation-for="Order.FlatNumber" class="error-message text-danger" role="alert"></span>
                    </div>
                </div>

                <!-- Notes -->
                <div class="form-group full-width">
                    <label class="form-label" asp-for="Order.Notes">ملاحظات</label>
                    <textarea asp-for="Order.Notes"
                              class="form-textarea"
                              placeholder="مثال: اخبط على الباب من غير ما ترن الجرس"
                              aria-describedby="notes-error"></textarea>
                    <span id="notes-error" asp-validation-for="Order.Notes" class="error-message text-danger" role="alert"></span>
                </div>
            </form>
        </section>

        <!-- Payment Methods -->
        <section class="form-section fade-in" aria-labelledby="payment-title">
            <div class="form-header">
                <i class="fas fa-credit-card" aria-hidden="true"></i>
                <h2 id="payment-title">طرق الدفع</h2>
            </div>

            <fieldset>
                <legend class="visually-hidden">اختر طريقة الدفع</legend>

                <!-- Cash on Delivery -->
                <div class="payment-option selected">
                    <input type="radio"
                           name="payment"
                           value="cod"
                           checked
                           class="payment-radio"
                           id="payment-cod"
                           aria-describedby="cod-description">
                    <label for="payment-cod" class="payment-info">
                        <div class="payment-title">الدفع عند الاستلام</div>
                        <div id="cod-description" class="payment-description">يمكنك الدفع نقدًا عند استلام الطلب</div>
                    </label>
                </div>

                <!-- Visa/Mastercard -->
                <div class="payment-option disabled">
                    <input type="radio"
                           name="payment"
                           value="card"
                           disabled
                           class="payment-radio"
                           id="payment-card"
                           aria-describedby="card-description">
                    <label for="payment-card" class="payment-info">
                        <div class="payment-title">
                            بطاقات فيزا / ماستركارد
                            <span class="coming-soon-badge">قريباً</span>
                        </div>
                        <div id="card-description" class="payment-description">ستتوفر قريبًا</div>
                    </label>
                </div>

                <!-- Vodafone Cash -->
                <div class="payment-option disabled">
                    <input type="radio"
                           name="payment"
                           value="vodafone"
                           disabled
                           class="payment-radio"
                           id="payment-vodafone"
                           aria-describedby="vodafone-description">
                    <label for="payment-vodafone" class="payment-info">
                        <div class="payment-title">
                            فودافون كاش
                            <span class="coming-soon-badge">قريباً</span>
                        </div>
                        <div id="vodafone-description" class="payment-description">ستتوفر قريبًا</div>
                    </label>
                </div>

                <!-- Meeza -->
                <div class="payment-option disabled">
                    <input type="radio"
                           name="payment"
                           value="meeza"
                           disabled
                           class="payment-radio"
                           id="payment-meeza"
                           aria-describedby="meeza-description">
                    <label for="payment-meeza" class="payment-info">
                        <div class="payment-title">
                            ميزة
                            <span class="coming-soon-badge">قريباً</span>
                        </div>
                        <div id="meeza-description" class="payment-description">ستتوفر قريبًا</div>
                    </label>
                </div>
            </fieldset>
        </section>
    </main>


    <!-- Place Order Button -->
    <div class="place-order-container">
        <button type="button" @* form="addressForm" *@ class="place-order-btn" id="placeOrderBtn" aria-describedby="order-total">
            <div class="btn-content">
                <i class="fas fa-shopping-bag" aria-hidden="true"></i>
                <span>تأكيد الطلب</span>
            </div>
            <div id="order-total" class="btn-price total-amount">15.00 جنيه</div>
        </button>
    </div>

@*     <!-- OTP Modal -->
    <div id="otpModal" class="modal-overlay" role="dialog" aria-labelledby="otp-title" aria-modal="true" style="display:none;">
        <div class="otp-modal">
            <div id="otpContent">
                <!-- OTP content will be loaded here -->
            </div>
        </div>
    </div> *@


     <script>
            // Updated Checkout JavaScript - Replace the existing script section in your Checkout.cshtml
        document.addEventListener("DOMContentLoaded", () => {
            const CART_KEY = "food_ecom_cart";
            const FORM_DATA_KEY = "checkout_form_data";
            let currentDeliveryFee = 0; // Start with 0 instead of 15

            window.isCustomerLoggedIn = @User.Identity.IsAuthenticated.ToString().ToLower();
            window.customerId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';

            // DOM Elements
            const form = document.getElementById('addressForm');
            const placeOrderBtn = document.getElementById('placeOrderBtn');
            const phoneInput = document.getElementById("Order_PhoneNumber");
            const governorateSelect = document.getElementById("Order_GovernrateId");
            const areaSelect = document.getElementById("Order_AreaId");
            const branchSelect = document.getElementById("Order_BranchId");

            const antiForgeryTokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryTokenInput?.value || "";

            // Init
            loadCartSummary();
            setupFormHandlers();
            restoreFormData();

            // Make completeOrder available globally
            window.completeOrder = completeOrder;

            // Restore saved form data
            async function restoreFormData() {
                const saved = JSON.parse(localStorage.getItem(FORM_DATA_KEY) || "{}");
                if (!saved) return;

                if (saved.phone) phoneInput.value = saved.phone;

                if (saved.governorate) {
                    governorateSelect.value = saved.governorate;
                    try {
                        const areasRes = await fetch(`/Cart/GetAreas?governorateId=${saved.governorate}`);
                        const areas = await areasRes.json();
                        areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';
                        areas.forEach(a => areaSelect.add(new Option(a.nameAr, a.id)));

                        if (saved.area) {
                            areaSelect.value = saved.area;
                            const branchesRes = await fetch(`/Cart/GetBranches?areaId=${saved.area}`);
                            const branches = await branchesRes.json();
                            branchSelect.innerHTML = '<option value="">اختر الفرع</option>';
                            branches.forEach(b => branchSelect.add(new Option(b.nameAr, b.id)));

                            if (saved.branch) {
                                branchSelect.value = saved.branch;
                                await updateDeliveryFee();
                            }
                        }
                    } catch (err) {
                        console.error("Error restoring area/branch:", err);
                    }
                }

                if (saved.street) document.getElementById("Order_Address").value = saved.street;
                if (saved.buildingDetails) document.getElementById("Order_BuildingDetails").value = saved.buildingDetails;
                if (saved.floor) document.getElementById("Order_Floor").value = saved.floor;
                if (saved.flatNumber) document.getElementById("Order_FlatNumber").value = saved.flatNumber;
                if (saved.notes) document.getElementById("Order_Notes").value = saved.notes;
            }

            // Save form data on input
            form.addEventListener("input", () => {
                const formData = {
                    phone: phoneInput.value,
                    governorate: governorateSelect.value,
                    area: areaSelect.value,
                    branch: branchSelect.value,
                    street: document.getElementById("Order_Address").value,
                    buildingDetails: document.getElementById("Order_BuildingDetails").value,
                    floor: document.getElementById("Order_Floor").value,
                    flatNumber: document.getElementById("Order_FlatNumber").value,
                    notes: document.getElementById("Order_Notes").value
                };
                localStorage.setItem(FORM_DATA_KEY, JSON.stringify(formData));
            });

            // Form handlers
            function setupFormHandlers() {
                fetch("/Cart/GetGovernorates")
                    .then(res => res.json())
                    .then(governorates => governorates.forEach(g => governorateSelect.add(new Option(g.nameAr, g.id))))
                    .catch(err => console.error("Error loading governorates:", err));

                governorateSelect.addEventListener("change", async () => {
                    areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';
                    branchSelect.innerHTML = '<option value="">اختر الفرع</option>';
                    currentDeliveryFee = 0;
                    updateDeliveryFeeDisplay();

                    if (!governorateSelect.value) return;

                    try {
                        const res = await fetch(`/Cart/GetAreas?governorateId=${governorateSelect.value}`);
                        const areas = await res.json();
                        areas.forEach(a => areaSelect.add(new Option(a.nameAr, a.id)));
                    } catch (err) {
                        console.error("Error loading areas:", err);
                    }
                });

                areaSelect.addEventListener("change", async () => {
                    branchSelect.innerHTML = '<option value="">اختر الفرع</option>';
                    currentDeliveryFee = 0;
                    updateDeliveryFeeDisplay();

                    if (!areaSelect.value) return;

                    try {
                        const res = await fetch(`/Cart/GetBranches?areaId=${areaSelect.value}`);
                        const branches = await res.json();
                        branches.forEach(b => branchSelect.add(new Option(b.nameAr, b.id)));
                    } catch (err) {
                        console.error("Error loading branches:", err);
                    }
                });

                // Branch selection change event to update delivery fee
                branchSelect.addEventListener("change", updateDeliveryFee);

                phoneInput.addEventListener('input', (e) => {
                    let value = e.target.value.replace(/\D/g, '');
                    if (value.length > 11) value = value.slice(0, 11);
                    e.target.value = value;

                    if (value.length === 11 && value.startsWith('01')) {
                        e.target.classList.remove('error');
                        const errorEl = document.getElementById('phone-error');
                        if (errorEl) errorEl.classList.remove('show');
                    }
                });

                form.addEventListener('input', (e) => {
                    if (e.target.classList.contains('error')) {
                        e.target.classList.remove('error');
                        const errorEl = document.getElementById(e.target.name + 'Error');
                        if (errorEl) errorEl.classList.remove('show');
                    }
                });
            }

            // Update delivery fee when branch changes
            async function updateDeliveryFee() {
                const branchId = branchSelect.value;
                if (!branchId) {
                    currentDeliveryFee = 0;
                    updateDeliveryFeeDisplay();
                    return;
                }

                try {
                    // Show loading state
                    const deliveryFeeElement = document.querySelector('.delivery-fee');
                    const originalText = deliveryFeeElement.textContent;
                    deliveryFeeElement.textContent = 'جاري التحميل...';

                    const res = await fetch(`/Cart/GetDeliveryFeeOfBranch?branchId=${branchId}`);

                    if (!res.ok) {
                        throw new Error(`HTTP error! status: ${res.status}`);
                    }

                    const data = await res.json();
                    currentDeliveryFee = data.DeliveryFee || 0;

                    updateDeliveryFeeDisplay();
                    console.log(`Delivery fee updated to: ${currentDeliveryFee} for branch ID: ${branchId}`);

                } catch (err) {
                    console.error("Error fetching delivery fee:", err);
                    currentDeliveryFee = 0;
                    updateDeliveryFeeDisplay();
                    showAlert("حدث خطأ في تحديث رسوم التوصيل", "warning");
                }
            }

            // Update delivery fee display and recalculate totals
            function updateDeliveryFeeDisplay() {
                const deliveryFeeElements = document.querySelectorAll('.delivery-fee');
                deliveryFeeElements.forEach(element => {
                    element.textContent = `${currentDeliveryFee.toFixed(2)} جنيه`;
                });
                calculateAndUpdateTotals();
            }

            // Calculate and update totals
            function calculateAndUpdateTotals() {
                try {
                    const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                    let subtotal = 0;

                    cart.forEach(item => {
                        const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) =>
                            sum + group.SelectedToppingOptions.reduce((optSum, opt) =>
                                optSum + (opt.PriceAtOrderTime * opt.Quantity), 0), 0);
                        subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                    });

                    const total = subtotal + currentDeliveryFee;

                    // Update subtotal
                    document.querySelector('.subtotal').textContent = `${subtotal.toFixed(2)} جنيه`;

                    // Update all total displays
                    document.querySelectorAll('.total-amount').forEach(el => {
                        el.textContent = `${total.toFixed(2)} جنيه`;
                    });

                } catch (error) {
                    console.error('Error calculating totals:', error);
                }
            }

            // Enhanced Cart summary with dynamic delivery fee
            async function loadCartSummary() {
                try {
                    const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                    let subtotal = 0;

                    cart.forEach(item => {
                        const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) =>
                            sum + group.SelectedToppingOptions.reduce((optSum, opt) =>
                                optSum + (opt.PriceAtOrderTime * opt.Quantity), 0), 0);
                        subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                    });

                    // Update subtotal
                    document.querySelector('.subtotal').textContent = `${subtotal.toFixed(2)} جنيه`;

                    // If branch is already selected, get its delivery fee
                    if (branchSelect.value) {
                        await updateDeliveryFee();
                    } else {
                        updateDeliveryFeeDisplay();
                    }

                } catch (error) {
                    console.error('Error loading cart:', error);
                }
            }

            // Place Order Button Event
            placeOrderBtn.addEventListener("click", async (e) => {
                e.preventDefault();

                if (!validateRequiredFields()) {
                    return;
                }

                const phone = phoneInput.value.trim();
                window.customerPhone = '@ViewBag.CustomerPhone' || "";

                if (window.isCustomerLoggedIn) {
                    if (window.customerPhone === phone) {
                        console.log("case 1: logged in & same phone");
                        await completeOrder();
                        return;
                    }

                    console.log("case 2: logged in & another phone");
                    await showOtpModal(phone);
                } else {
                    console.log("case 3: new guest");
                    await showOtpModal(phone);
                }
            });

            // Show OTP Modal using global handler
            async function showOtpModal(phoneNumber) {
                const btnText = placeOrderBtn.querySelector('.btn-content span');
                const originalText = btnText.textContent;

                // Show loading state
                btnText.innerHTML = '<div class="loading-spinner"></div> جاري الإرسال...';
                placeOrderBtn.disabled = true;

                try {
                    const otpHandler = await window.OtpHandler.show(phoneNumber, {
                        onSuccess: async (result, formData) => {
                            console.log("OTP verified successfully");

                            // Hide the modal
                            window.OtpHandler.hide();

                            // Update login status
                            window.isCustomerLoggedIn = true;
                            window.customerPhone = formData.get("PhoneNumber") || "";

                            // Complete the order
                            await completeOrder();
                        },
                        onCancel: () => {
                            console.log("OTP cancelled");
                            window.OtpHandler.hide();
                        },
                        onError: (error) => {
                            console.error("OTP error:", error);
                            showAlert("حدث خطأ أثناء التحقق من الرمز", "error");
                        }
                    });

                    if (!otpHandler) {
                        showAlert("فشل في عرض نافذة التحقق", "error");
                    }

                } catch (error) {
                    console.error("Error showing OTP modal:", error);
                    showAlert("حدث خطأ أثناء إرسال رمز التحقق", "error");
                } finally {
                    // Reset button state
                    btnText.textContent = originalText;
                    placeOrderBtn.disabled = false;
                }
            }

            // Validate required fields
            function validateRequiredFields() {
                const form = document.getElementById("addressForm");
                const requiredInputs = form.querySelectorAll("[required]");
                let invalidFields = [];

                requiredInputs.forEach(input => {
                    if (!input.value.trim()) {
                        input.classList.add("is-invalid");
                        input.style.animation = "none";
                        input.offsetHeight; // reflow
                        input.style.animation = null;
                        invalidFields.push(input);

                        input.addEventListener("input", () => {
                            if (input.value.trim()) {
                                input.classList.remove("is-invalid");
                            }
                        }, { once: true });
                    } else {
                        input.classList.remove("is-invalid");
                    }
                });

                if (invalidFields.length > 0) {
                    let firstInvalid = invalidFields[0];
                    firstInvalid.focus();

                    let label = form.querySelector(`label[for="${firstInvalid.id}"]`);
                    let fieldName = label ? label.textContent.trim() : firstInvalid.name || firstInvalid.id;
                    fieldName = fieldName.replace("*", "").trim();

                    if (invalidFields.length === 1) {
                        showAlert(`⚠️ يرجى ملء ${fieldName}`, "error");
                    } else {
                        showAlert("⚠️ يرجى ملء جميع الحقول المطلوبة", "error");
                    }

                    return false;
                }

                return true;
            }

            // Complete Order function with dynamic delivery fee
            async function completeOrder() {
                const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                const btnText = placeOrderBtn.querySelector('.btn-content span');
                const originalText = btnText.textContent;

                if (cart.length === 0) {
                    showAlert("سلة التسوق فارغة", "error");
                    return;
                }

                btnText.innerHTML = '<div class="loading-spinner"></div> جاري المعالجة...';
                placeOrderBtn.disabled = true;

                // Add cart items and calculated values to form
                document.getElementById("ItemsJson").value = JSON.stringify(cart);

                const form = document.getElementById("addressForm");
                const formData = new FormData(form);

                // Add delivery fee to form data if needed
                formData.append("DeliveryFee", currentDeliveryFee);

                try {
                    const response = await fetch("/Order/CreateOrder", { method: "POST", body: formData });
                    let result;

                    try {
                        result = await response.json();
                    } catch (err) {
                        console.error("JSON parse error:", err);
                        showAlert("الرد من الخادم غير صالح", "error");
                        return;
                    }

                    if (!response.ok || !result.success) {
                        showAlert(result.message || "حدث خطأ أثناء إنشاء الطلب", "error");
                        return;
                    }

                    if (result.data && result.data.redirectUrl) {
                        localStorage.removeItem(CART_KEY);
                        localStorage.removeItem(FORM_DATA_KEY);
                        document.body.style.transition = "opacity 0.6s ease, transform 0.6s ease";
                        document.body.style.opacity = "0";
                        document.body.style.transform = "translateY(20px)";
                        setTimeout(() => { window.location.href = result.data.redirectUrl; }, 600);
                    } else {
                        showAlert("تم إنشاء الطلب بنجاح", "success");
                    }
                } catch (error) {
                    console.error("Order completion error:", error);
                    let userMessage = "حدث خطأ في معالجة الطلب. حاول مرة أخرى";

                    if (error.message?.includes('Failed to fetch')) {
                        userMessage = "مشكلة في الاتصال بالخادم. تحقق من الإنترنت وحاول مرة أخرى";
                    } else if (error.message?.includes('HTTP 400')) {
                        userMessage = "بيانات الطلب غير صحيحة. تحقق من البيانات المدخلة";
                    } else if (error.message?.includes('HTTP 401')) {
                        userMessage = "انتهت جلسة العمل. يرجى تسجيل الدخول مرة أخرى";
                    } else if (error.message?.includes('HTTP 500')) {
                        userMessage = "خطأ في الخادم. يرجى المحاولة لاحقاً";
                    }

                    showAlert(userMessage, "error");
                } finally {
                    btnText.textContent = originalText;
                    placeOrderBtn.disabled = false;
                }
            }

            // Toast/alert function
            function showAlert(message, type = "info") {
                if (window.Swal) {
                    Swal.fire({
                        icon: type,
                        title: message,
                        confirmButtonText: "موافق"
                    });
                } else {
                    alert(message);
                }
            }
        });
    </script>

    <script src="~/js/otp-handler.js" asp-append-version="true"></script>

@* 
    <script>
                document.addEventListener("DOMContentLoaded", () => {
                    const CART_KEY = "food_ecom_cart";
                    const FORM_DATA_KEY = "checkout_form_data";

                    window.isCustomerLoggedIn = @User.Identity.IsAuthenticated.ToString().ToLower();
                    window.customerId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';

                    // DOM Elements
                    const form = document.getElementById('addressForm');
                    const placeOrderBtn = document.getElementById('placeOrderBtn');
                    const phoneInput = document.getElementById("Order_PhoneNumber");
                    const governorateSelect = document.getElementById("Order_GovernrateId");
                    const areaSelect = document.getElementById("Order_AreaId");
                    const branchSelect = document.getElementById("Order_BranchId");


                    const antiForgeryTokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                    const antiForgeryToken = antiForgeryTokenInput?.value || "";

                            let customerPhone;

                    // Init
                    loadCartSummary();
                    setupFormHandlers();
                    restoreFormData();

                    // Make completeOrder available globally
                    window.completeOrder = completeOrder;

                    // Restore saved form data
                    async function restoreFormData() {
                        const saved = JSON.parse(localStorage.getItem(FORM_DATA_KEY) || "{}");
                        if (!saved) return;

                        if (saved.phone) phoneInput.value = saved.phone;

                        if (saved.governorate) {
                            governorateSelect.value = saved.governorate;
                            try {
                                const areasRes = await fetch(`/Cart/GetAreas?governorateId=${saved.governorate}`);
                                const areas = await areasRes.json();
                                areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';
                                areas.forEach(a => areaSelect.add(new Option(a.nameAr, a.id)));

                                if (saved.area) {
                                    areaSelect.value = saved.area;
                                    const branchesRes = await fetch(`/Cart/GetBranches?areaId=${saved.area}`);
                                    const branches = await branchesRes.json();
                                    branchSelect.innerHTML = '<option value="">اختر الفرع</option>';
                                    branches.forEach(b => branchSelect.add(new Option(b.nameAr, b.id)));
                branchSelect.addEventListener("change", updateDeliveryFee);
                                  if (saved.branch) {
    branchSelect.value = saved.branch;
    await updateDeliveryFee(); 
}

                                }
                            } catch (err) {
                                console.error("Error restoring area/branch:", err);
                            }
                        }

                        if (saved.street) document.getElementById("Order_Address").value = saved.street;
                        if (saved.buildingDetails) document.getElementById("Order_BuildingDetails").value = saved.buildingDetails;
                        if (saved.floor) document.getElementById("Order_Floor").value = saved.floor;
                        if (saved.flatNumber) document.getElementById("Order_FlatNumber").value = saved.flatNumber;
                        if (saved.notes) document.getElementById("Order_Notes").value = saved.notes;
                    }

                    // Save form data on input
                    form.addEventListener("input", () => {
                        const formData = {
                            phone: phoneInput.value,
                            governorate: governorateSelect.value,
                            area: areaSelect.value,
                            branch: branchSelect.value,
                            street: document.getElementById("Order_Address").value,
                            buildingDetails: document.getElementById("Order_BuildingDetails").value,
                            floor: document.getElementById("Order_Floor").value,
                            flatNumber: document.getElementById("Order_FlatNumber").value,
                            notes: document.getElementById("Order_Notes").value
                        };
                        localStorage.setItem(FORM_DATA_KEY, JSON.stringify(formData));
                    });

                    // Form handlers
                    function setupFormHandlers() {
                        fetch("/Cart/GetGovernorates")
                            .then(res => res.json())
                            .then(governorates => governorates.forEach(g => governorateSelect.add(new Option(g.nameAr, g.id))))
                            .catch(err => console.error("Error loading governorates:", err));

                        governorateSelect.addEventListener("change", async () => {
                            areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';
                            branchSelect.innerHTML = '<option value="">اختر الفرع</option>';
                            if (!governorateSelect.value) return;

                            try {
                                const res = await fetch(`/Cart/GetAreas?governorateId=${governorateSelect.value}`);
                                const areas = await res.json();
                                areas.forEach(a => areaSelect.add(new Option(a.nameAr, a.id)));
                            } catch (err) {
                                console.error("Error loading areas:", err);
                            }
                        });

                        areaSelect.addEventListener("change", async () => {
                            branchSelect.innerHTML = '<option value="">اختر الفرع</option>';
                            if (!areaSelect.value) return;

                            try {
                                const res = await fetch(`/Cart/GetBranches?areaId=${areaSelect.value}`);
                                const branches = await res.json();
                                branches.forEach(b => branchSelect.add(new Option(b.nameAr, b.id)));
                            } catch (err) {
                                console.error("Error loading branches:", err);
                            }
                        });


                        phoneInput.addEventListener('input', (e) => {
                            let value = e.target.value.replace(/\D/g, '');
                            if (value.length > 11) value = value.slice(0, 11);
                            e.target.value = value;

                            if (value.length === 11 && value.startsWith('01')) {
                                e.target.classList.remove('error');
                                document.getElementById('phoneError').classList.remove('show');
                            }
                        });

                        form.addEventListener('input', (e) => {
                            if (e.target.classList.contains('error')) {
                                e.target.classList.remove('error');
                                const errorEl = document.getElementById(e.target.name + 'Error');
                                if (errorEl) errorEl.classList.remove('show');
                            }
                        });
                    }

                    async function updateDeliveryFee() {
            const branchId = branchSelect.value;
            if (!branchId) return;

            try {
                        const res = await fetch(`/Cart/GetDeliveryFeeOfBranch?branchId=${branchId}`);
                const data = await res.json();

                     const deliveryFee = data || 0;


                       
                                      


                // حساب subtotal
                const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                let subtotal = 0;
                cart.forEach(item => {
                    const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) =>
                        sum + group.SelectedToppingOptions.reduce((optSum, opt) =>
                            optSum + (opt.PriceAtOrderTime * opt.Quantity), 0), 0);
                    subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                });

                const total = subtotal + deliveryFee;

                // تحديث الـ UI
                document.querySelector('.subtotal').textContent = `${subtotal.toFixed(2)} جنيه`;
                document.querySelector('.delivery-fee').textContent = `${deliveryFee.toFixed(2)} جنيه`;
                document.querySelectorAll('.total-amount').forEach(el => {
                    el.textContent = `${total.toFixed(2)} جنيه`;
                });
            } catch (err) {
                console.error("Error fetching branch fee:", err);
            }
        }


                    // Cart summary
                 async function loadCartSummary() {
            try {
                const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                let subtotal = 0;

                cart.forEach(item => {
                    const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) =>
                        sum + group.SelectedToppingOptions.reduce((optSum, opt) =>
                            optSum + (opt.PriceAtOrderTime * opt.Quantity), 0), 0);
                    subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                });

                if (branchSelect.value) {
                    await updateDeliveryFee();
                } else {
                    const deliveryFee = 0;
                    const total = subtotal + deliveryFee;

                    document.querySelector('.subtotal').textContent = `${subtotal.toFixed(2)} جنيه`;
                    document.querySelector('.delivery-fee').textContent = `${deliveryFee.toFixed(2)} جنيه`;
                    document.querySelectorAll('.total-amount').forEach(el => {
                        el.textContent = `${total.toFixed(2)} جنيه`;
                    });
                }
            } catch (error) {
                console.error('Error loading cart:', error);
            }
        }

                 
        placeOrderBtn.addEventListener("click", async (e) => {
            e.preventDefault();

            console.log("window.isCustomerLoggedIn", window.isCustomerLoggedIn);

            if (!validateRequiredFields()) {
                return;
            }

            // User input phone
            const phone = phoneInput.value.trim();

            // Server stored phone (from ViewBag)
            if (typeof window.customerPhone === "undefined") {
                window.customerPhone = '@ViewBag.CustomerPhone' || "";
            }

            console.log("Input phone:", phone);
            console.log("Stored customerPhone:", window.customerPhone);

            if (window.isCustomerLoggedIn) {
               
                if (window.customerPhone === phone) {
                    console.log("case 1: logged in & same phone");
                    await completeOrder();
                    return;
                }
                console.log("Error");
                console.log("case 2: logged in & another phone");
                await sendOtp(phoneInput, placeOrderBtn);

            } else {

                console.log("case 3: new guest");
                await sendOtp(phoneInput, placeOrderBtn);
            }
        });



                function validateRequiredFields() {
                    const form = document.getElementById("addressForm");
                    const requiredInputs = form.querySelectorAll("[required]");
                    let invalidFields = [];

                    requiredInputs.forEach(input => {
                        if (!input.value.trim()) {
                            input.classList.add("is-invalid");

                            // إعادة تشغيل الأنيميشن
                            input.style.animation = "none";
                            input.offsetHeight; // reflow
                            input.style.animation = null;

                            invalidFields.push(input);

                            // متابعة live: أول ما يكتب يشيل الكلاس
                            input.addEventListener("input", () => {
                                if (input.value.trim()) {
                                    input.classList.remove("is-invalid");
                                }
                            }, { once: true });
                        } else {
                            input.classList.remove("is-invalid");
                        }
                    });

                    if (invalidFields.length > 0) {
                        let firstInvalid = invalidFields[0];
                        firstInvalid.focus();

                        let label = form.querySelector(`label[for="${firstInvalid.id}"]`);
                        let fieldName = label ? label.textContent.trim() : firstInvalid.name || firstInvalid.id;
                        fieldName = fieldName.replace("*", "").trim();

                        if (invalidFields.length === 1) {
                            showAlert(`⚠️ يرجى ملء ${fieldName}`, "error");
                        } else {
                            showAlert("⚠️ يرجى ملء جميع الحقول المطلوبة", "error");
                        }

                        return false;
                    }

                    return true;
                }






                    async function sendOtp(phoneInput, placeOrderBtn) {
                        const phoneNumber = phoneInput.value;
                        if (!phoneNumber || phoneNumber.length !== 11 || !phoneNumber.match(/^01[0125][0-9]{8}$/)) {
                            showAlert("يرجى إدخال رقم هاتف صحيح", "error");
                            phoneInput.focus();
                            return;
                        }
                        try {
                            const formData = new FormData();
                            formData.append("PhoneNumber", phoneNumber);

                            const btnText = placeOrderBtn.querySelector('.btn-content span');
                            const originalText = btnText.textContent;
                            btnText.innerHTML = '<div class="loading-spinner"></div> جاري الإرسال...';
                            placeOrderBtn.disabled = true;

                            const response = await fetch("/Account/SendOtp", { method: "POST", body: formData });
                            if (response.ok) {
                                const html = await response.text();
                                const otpContent = document.querySelector("#otpContent");
                                const otpModal = document.getElementById("otpModal");
                                if (otpContent && otpModal) {
                                    otpContent.innerHTML = html;
                                    otpModal.style.display = "flex";
                                    executeScriptsInElement(otpContent);
                                    setTimeout(() => initializeOTPModal(), 100);
                                } else {
                                    console.error("❌ otpContent أو otpModal غير موجود في DOM");
                                }
                            } else {
                                const errorResult = await response.json().catch(() => ({}));
                                showAlert(errorResult.message || "❌ فشل إرسال رمز التحقق", "error");
                            }
                        } catch (err) {
                            console.error("SendOtp error:", err);
                            showAlert("⚠️ حدث خطأ أثناء إرسال رمز التحقق", "error");
                        } finally {
                            const btnText = placeOrderBtn.querySelector('.btn-content span');
                            btnText.textContent = "تأكيد الطلب";
                            placeOrderBtn.disabled = false;
                        }
                    }

                    async function completeOrder() {
                        const CART_KEY = "food_ecom_cart";
                        const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                        const placeOrderBtn = document.getElementById("placeOrderBtn");
                        const btnText = placeOrderBtn.querySelector('.btn-content span');
                        const originalText = btnText.textContent;

                        if (cart.length === 0) {
                            showAlert("سلة التسوق فارغة", "error");
                            return;
                        }

                        btnText.innerHTML = '<div class="loading-spinner"></div> جاري المعالجة...';
                        placeOrderBtn.disabled = true;

                        document.getElementById("ItemsJson").value = JSON.stringify(cart);
                        const form = document.getElementById("addressForm");
                        const formData = new FormData(form);

                        try {
                            const response = await fetch("/Order/CreateOrder", { method: "POST", body: formData });
                            let result;
                            try {
                                result = await response.json();
                            } catch (err) {
                                console.error("JSON parse error:", err);
                                showAlert("الرد من الخادم غير صالح", "error");
                                return;
                            }

                            if (!response.ok || !result.success) {
                                showAlert(result.message || "حدث خطأ أثناء إنشاء الطلب", "error");
                                return;
                            }

                            if (result.data && result.data.redirectUrl) {
                                localStorage.removeItem(CART_KEY);
                                document.body.style.transition = "opacity 0.6s ease, transform 0.6s ease";
                                document.body.style.opacity = "0";
                                document.body.style.transform = "translateY(20px)";
                                setTimeout(() => { window.location.href = result.data.redirectUrl; }, 600);
                            } else {
                                showAlert("تم إنشاء الطلب بنجاح", "success");
                            }
                        } catch (error) {
                            console.error("❌ Order completion error:", error);
                            let userMessage = "حدث خطأ في معالجة الطلب. حاول مرة أخرى";
                            if (error.message?.includes('Failed to fetch')) userMessage = "مشكلة في الاتصال بالخادم. تحقق من الإنترنت وحاول مرة أخرى";
                            else if (error.message?.includes('HTTP 400')) userMessage = "بيانات الطلب غير صحيحة. تحقق من البيانات المدخلة";
                            else if (error.message?.includes('HTTP 401')) userMessage = "انتهت جلسة العمل. يرجى تسجيل الدخول مرة أخرى";
                            else if (error.message?.includes('HTTP 500')) userMessage = "خطأ في الخادم. يرجى المحاولة لاحقاً";
                            showAlert(userMessage, "error");
                        } finally {
                            btnText.textContent = originalText;
                            placeOrderBtn.disabled = false;
                        }
                    }

                    function executeScriptsInElement(element) {
                        const scripts = element.querySelectorAll('script');
                        scripts.forEach(script => {
                            const newScript = document.createElement('script');
                            Array.from(script.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value));
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            script.parentNode.removeChild(script);
                            document.head.appendChild(newScript);
                        });
                    }



                    function initializeOTPModal() {
                        const otpInputs = document.querySelectorAll('.otp-input');
                        const otpHiddenInput = document.getElementById('Otp');
                        const verifyBtn = document.getElementById('verifyOtp');
                        const otpForm = document.getElementById('otpForm');
                        const cancelBtn = document.getElementById('cancelOtp');
                        const resendBtn = document.getElementById('resendBtn');
                        const otpError = document.getElementById('otpError');
                        const timerElement = document.getElementById('timerCount');
                        const attemptsElement = document.getElementById('attemptsCount');

                        if (!otpInputs.length || !otpHiddenInput || !verifyBtn || !otpForm) return;

                        let timeLeft = 60;
                        let attempts = 5;
                        let timerInterval = null;
                        let isSubmitting = false;

                        function updateOTPValue() {
                            const otpValue = Array.from(otpInputs).map(input => input.value).join('');
                            if (otpHiddenInput) otpHiddenInput.value = otpValue;
                            if (verifyBtn) verifyBtn.disabled = otpValue.length !== 4 || isSubmitting;
                            if (otpValue.length === 4) hideError();
                        }

                        Array.from(otpInputs).forEach((input, index) => {
                            input.addEventListener('input', function (e) {
                                const value = e.target.value.replace(/[^0-9]/g, '');
                                e.target.value = value.length > 1 ? value.charAt(0) : value;
                                if (value && index < otpInputs.length - 1) otpInputs[index + 1].focus();
                                updateOTPValue();
                            });

                            input.addEventListener('keydown', function (e) {
                                if (e.key === 'Backspace' && !e.target.value && index > 0) otpInputs[index - 1].focus();
                            });

                            input.addEventListener('paste', function (e) {
                                e.preventDefault();
                                const pastedData = e.clipboardData.getData('text').replace(/[^0-9]/g, '');
                                for (let i = 0; i < pastedData.length && (index + i) < otpInputs.length; i++) {
                                    otpInputs[index + i].value = pastedData[i];
                                }
                                updateOTPValue();
                            });
                        });

            

                // التحقق من OTP
                otpForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                    if (isSubmitting) return;

                    updateOTPValue();
                    const otpValue = otpHiddenInput.value;
                    if (otpValue.length !== 4) {
                        showError('يرجى إدخال رمز التحقق كاملاً');
                        return;
                    }

                    showLoading();
                    try {
                        const formData = new FormData(otpForm);
                        const response = await fetch('/Account/VerifyOtp', { method: 'POST', body: formData });
                        const result = await response.json();

                        if (result.success) {
                            const modal = document.getElementById('otpModal');
                            if (modal) modal.style.display = 'none';

                            window.isCustomerLoggedIn = true;

                            console.log("OTP verified ✅, completing order...");

                                            window.customerPhone = formData.get("phoneNumber") || "";

                            await window.completeOrder();
                        } else {
                            attempts--;
                            if (attemptsElement) attemptsElement.textContent = attempts;

                            if (attempts <= 0) {
                                showBlockedState();
                            } else {
                                showError(result.message || 'رمز التحقق غير صحيح');
                                clearInputs();
                            }
                        }
                    } catch (error) {
                        showError('حدث خطأ أثناء التحقق من الرمز');
                    } finally {
                        hideLoading();
                    }
                });

                        if (cancelBtn) {
                            cancelBtn.addEventListener('click', function () {
                                const modal = document.getElementById('otpModal');
                                if (modal) modal.style.display = 'none';
                                clearTimer();
                            });
                        }

                        function showLoading() {
                            isSubmitting = true;
                            const verifyText = verifyBtn.querySelector('.verify-text');
                            const loadingSpinner = verifyBtn.querySelector('.loading-spinner');
                            if (verifyText) verifyText.style.display = 'none';
                            if (loadingSpinner) loadingSpinner.style.display = 'inline-block';
                            verifyBtn.disabled = true;
                        }

                        function hideLoading() {
                            isSubmitting = false;
                            const verifyText = verifyBtn.querySelector('.verify-text');
                            const loadingSpinner = verifyBtn.querySelector('.loading-spinner');
                            if (verifyText) verifyText.style.display = 'inline';
                            if (loadingSpinner) loadingSpinner.style.display = 'none';
                            updateOTPValue();
                        }

                        function showError(message) {
                            if (otpError) {
                                otpError.textContent = message;
                                otpError.style.display = 'block';
                            }
                            Array.from(otpInputs).forEach(input => input.classList.add('error'));
                        }

                        function hideError() {
                            if (otpError) otpError.style.display = 'none';
                            Array.from(otpInputs).forEach(input => input.classList.remove('error'));
                        }

                        function clearInputs() {
                            Array.from(otpInputs).forEach(input => { input.value = ''; input.classList.remove('error'); });
                            updateOTPValue();
                            if (otpInputs.length > 0) otpInputs[0].focus();
                        }

                        function showBlockedState() {
                            const otpContent = document.getElementById('otpContent');
                            const blockedContent = document.getElementById('blockedContent');
                            if (otpContent) otpContent.style.display = 'none';
                            if (blockedContent) blockedContent.style.display = 'block';
                        }

                        function startTimer() {
                            clearTimer();
                            timerInterval = setInterval(() => {
                                timeLeft--;
                                if (timerElement) timerElement.textContent = timeLeft;
                                if (timeLeft <= 0) enableResend();
                            }, 1000);
                        }


                        function enableResend() {
                            clearTimer();
                            if (resendBtn) {
                                resendBtn.disabled = false;
                                resendBtn.textContent = 'إعادة الإرسال';
                            }
                        }

                        function clearTimer() {
                            if (timerInterval) {
                                clearInterval(timerInterval);
                                timerInterval = null;
                            }
                        }

                        // Initialize timer and focus
                        startTimer();
                        if (otpInputs.length > 0) {
                            otpInputs[0].focus();
                        }
                        updateOTPValue();

                        // console.log('✅ OTP modal initialized successfully');
                    }


                    // Complete order function
                //         async function completeOrder2() {


                //     const btnText = placeOrderBtn.querySelector('.btn-content span');
                //     const originalText = btnText.textContent;

                //     // Set loading state
                //     btnText.innerHTML = '<div class="loading-spinner"></div> جاري المعالجة...';
                //     placeOrderBtn.disabled = true;

                //     try {
                //         // Validate cart
                //         const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                //         if (cart.length === 0) {
                //             showAlert("سلة التسوق فارغة", "error");
                //             return;
                //         }

                //         // Calculate totals
                //         let subtotal = 0;
                //         cart.forEach(item => {
                //             const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) =>
                //                 sum + group.SelectedToppingOptions.reduce((optSum, opt) =>
                //                     optSum + (opt.PriceAtOrderTime * opt.Quantity), 0), 0);
                //             subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                //         });

                //         const deliveryFees = 15;
                //         const grandTotal = subtotal + deliveryFees;

                //         // Prepare payload
                //             const payload = {
                //     PhoneNumber: phoneInput.value,
                //     GovernrateId: +governorateSelect.value,
                //     AreaId: +areaSelect.value,
                //     BranchId: +branchSelect.value,
                //     Address: document.getElementById('Order_Address').value,
                //     BuildingDetails: document.getElementById('Order_BuildingDetails').value,
                //     Floor: document.getElementById('Order_Floor').value || '',
                //     FlatNumber: document.getElementById('Order_FlatNumber').value || '',
                //     Notes: document.getElementById('Order_Notes').value || '',
                //     SubTotal: subtotal,
                //     // DeliveryFees: deliveryFees,
                //     GrandTotal: grandTotal,
                //     Items: cart,
                //     Payment: {
                //         Amount: grandTotal,
                //         PaymentMethod: 1,
                //         PaymentStatus: 1
                //     }
                // };

                //         console.log("📦 Payload:", payload);

                //         // Make API request
                //         const response = await fetch('/Order/CreateOrder', {
                //             method: 'POST',
                //             headers: {
                //                 'Content-Type': 'application/json',
                //                 'RequestVerificationToken': antiForgeryToken
                //              }//,
                //             // body: JSON.stringify(payload)
                //         });

                //         console.log('📡 Response status:', response.status);
                //         console.log('📡 Response content-type:', response.headers.get('content-type'));

                //         // Handle non-OK responses
                //         if (!response.ok) {
                //             let errorMessage = `HTTP ${response.status}: ${response.statusText}`;

                //             // Try to get error details from response
                //             try {
                //                 const errorText = await response.text();
                //                 console.log('❌ Error response:', errorText);

                //                 // Try to parse as JSON for structured error
                //                 try {
                //                     const errorData = JSON.parse(errorText);
                //                     errorMessage = errorData.message || errorMessage;
                //                 } catch {
                //                     // If not JSON, use the text as is (might be HTML error page)
                //                     if (errorText.includes('<html>')) {
                //                         errorMessage = 'خطأ في الخادم - يرجى المحاولة مرة أخرى';
                //                     } else {
                //                         errorMessage = errorText || errorMessage;
                //                     }
                //                 }
                //             } catch {
                //                 // If we can't read the error response, use the status
                //             }

                //             throw new Error(errorMessage);
                //         }

                //         // Parse successful response
                //         const responseText = await response.text();
                //         console.log('✅ Raw response:', responseText);

                //         if (!responseText.trim()) {
                //             throw new Error('خطأ: استجابة فارغة من الخادم');
                //         }

                //         let result;
                //         try {
                //             result = JSON.parse(responseText);
                //         } catch (parseError) {
                //             console.error('❌ JSON parse error:', parseError);
                //             console.log('📄 Response that failed to parse:', responseText);
                //             throw new Error('خطأ في تحليل استجابة الخادم');
                //         }

                //         console.log('📋 Parsed result:', result);

                //         // Handle response
                //         if (result.success) {
                //             console.log('🎉 Order created successfully:', {
                //                 orderId: result.orderId,
                //                 orderNumber: result.orderNumber
                //             });

                //             // Clear cart and form data
                //             localStorage.removeItem(CART_KEY);
                //             // localStorage.removeItem(FORM_DATA_KEY);

                //             // Add success animation
                //             document.body.style.transition = "opacity 0.6s ease, transform 0.6s ease";
                //             document.body.style.opacity = "0";
                //             document.body.style.transform = "translateY(20px)";

                //             // Redirect after animation
                //             setTimeout(() => {
                //                 window.location.href = '/Home/Index';
                //             }, 600);

                //         } else {
                //             console.warn('⚠️ Order creation failed:', result.message);
                //             showAlert(result.message || "فشل في إنشاء الطلب", "error");
                //         }

                //     } catch (error) {
                //         console.error('❌ Order completion error:', error);

                //         // Show user-friendly error message
                //         let userMessage = "حدث خطأ في معالجة الطلب. حاول مرة أخرى";

                //         if (error.message.includes('Failed to fetch')) {
                //             userMessage = "مشكلة في الاتصال بالخادم. تحقق من الإنترنت وحاول مرة أخرى";
                //         } else if (error.message.includes('HTTP 400')) {
                //             userMessage = "بيانات الطلب غير صحيحة. تحقق من البيانات المدخلة";
                //         } else if (error.message.includes('HTTP 401')) {
                //             userMessage = "انتهت جلسة العمل. يرجى تسجيل الدخول مرة أخرى";
                //         } else if (error.message.includes('HTTP 500')) {
                //             userMessage = "خطأ في الخادم. يرجى المحاولة لاحقاً";
                //         } else if (error.message.startsWith('خطأ') || error.message.includes('HTTP')) {
                //             userMessage = error.message;
                //         }

                //         showAlert(userMessage, "error");

                //     } finally {
                //         // Reset button state
                //         btnText.textContent = originalText;
                //         placeOrderBtn.disabled = false;
                //     }
                // }




                // Toast/alert
                    function showAlert(message, type = "info") {
                        if (window.Swal) {
                            Swal.fire({
                                icon: type,
                                title: message,
                                confirmButtonText: "موافق"
                            });
                        } else {
                            alert(message);
                        }
                    }
                });
    </script>

 *@

</body>
</html>