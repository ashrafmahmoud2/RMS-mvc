<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>الدفع وتأكيد الطلب</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #185499;
            --primary-dark: #0f3d7a;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --background: #f7f7f7;
            --surface: #fafafa;
            --surface-variant: #f1f2f8;
            --on-surface: #333;
            --on-surface-variant: #666;
            --border: #ccc;
            --shadow: 0px 4px 8px rgba(0, 0, 0, 0.15);
            --shadow-lg: 0px 4px 20px rgba(0, 0, 0, 0.1);
            --border-radius: 20px;
            --border-radius-lg: 30px;
            --transition: all 0.3s ease;
        }

        body {
            font-family: Arial, sans-serif;
            background: var(--background);
            color: var(--on-surface);
            line-height: 1.6;
            min-height: 100vh;
            padding-bottom: 100px;
            margin: 0;
        }

        /* Header */
        .checkout-header {
            background: var(--primary-color);
            padding: 16px 0;
            box-shadow: var(--shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .header-btn {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 8px;
            transition: var(--transition);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .header-btn:hover {
                background: rgba(255, 255, 255, 0.1);
            }

        .header-title {
            color: white;
            font-size: 20px;
            font-weight: 600;
        }

        /* Main Container */
        .main-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Progress Steps */
        .progress-container {
            background: white;
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: var(--shadow);
        }

        .progress-steps {
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: relative;
        }

        .progress-line {
            position: absolute;
            top: 20px;
            left: 0;
            right: 0;
            height: 2px;
            background: #e0e0e0;
            z-index: 1;
        }

        .progress-line-active {
            height: 2px;
            background: var(--primary-color);
            width: 33%;
            transition: width 0.3s ease;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 2;
        }

        .step-circle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: white;
            border: 3px solid #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: #999;
            transition: var(--transition);
        }

        .step.active .step-circle {
            background: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }

        .step.completed .step-circle {
            background: var(--success-color);
            border-color: var(--success-color);
            color: white;
        }

        .step-label {
            margin-top: 8px;
            font-size: 12px;
            font-weight: 500;
            color: #999;
            text-align: center;
        }

        .step.active .step-label,
        .step.completed .step-label {
            color: var(--on-surface);
        }

        /* Order Summary */
        .order-summary {
            background: white;
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: var(--shadow);
        }

        .summary-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            color: var(--primary-color);
            font-size: 18px;
            font-weight: bold;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }

            .summary-item:last-child {
                border-bottom: none;
                font-weight: bold;
                font-size: 18px;
                color: var(--primary-color);
            }

        /* Address Form */
        .address-form {
            background: white;
            border-radius: var(--border-radius);
            padding: 25px;
            box-shadow: var(--shadow);
            margin-bottom: 20px;
        }

        .form-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            color: var(--primary-color);
            font-size: 20px;
            font-weight: bold;
        }

        .form-row {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .form-group {
            flex: 1;
        }

            .form-group.full-width {
                flex: 1 1 100%;
            }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--on-surface);
            font-size: 14px;
        }

            .form-label.required::after {
                content: " *";
                color: var(--danger-color);
            }

        .form-input,
        .form-select,
        .form-textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid var(--border);
            border-radius: 12px;
            font-size: 16px;
            transition: var(--transition);
            background: white;
            color: var(--on-surface);
        }

            .form-input:focus,
            .form-select:focus,
            .form-textarea:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgba(24, 84, 153, 0.1);
            }

            .form-input.error,
            .form-select.error,
            .form-textarea.error {
                border-color: var(--danger-color);
            }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }

        .error-message {
            color: var(--danger-color);
            font-size: 12px;
            margin-top: 4px;
            display: none;
        }

            .error-message.show {
                display: block;
            }

        /* Checkbox */
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
        }

        .checkbox-input {
            width: 18px;
            height: 18px;
            accent-color: var(--primary-color);
        }

        .checkbox-label {
            color: var(--on-surface);
            font-size: 14px;
        }

        /* Delivery Options */
        .delivery-options {
            background: white;
            border-radius: var(--border-radius);
            padding: 25px;
            box-shadow: var(--shadow);
            margin-bottom: 20px;
        }

        .delivery-option {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px;
            border: 2px solid var(--border);
            border-radius: 12px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: var(--transition);
        }

            .delivery-option:hover {
                border-color: var(--primary-color);
                background: rgba(24, 84, 153, 0.02);
            }

            .delivery-option.selected {
                border-color: var(--primary-color);
                background: rgba(24, 84, 153, 0.05);
            }

        .delivery-radio {
            width: 20px;
            height: 20px;
            accent-color: var(--primary-color);
        }

        .delivery-info {
            flex: 1;
        }

        .delivery-title {
            font-weight: bold;
            color: var(--on-surface);
            margin-bottom: 4px;
        }

        .delivery-description {
            color: var(--on-surface-variant);
            font-size: 14px;
        }

        .delivery-price {
            font-weight: bold;
            color: var(--primary-color);
            font-size: 16px;
        }

        /* Place Order Button */
        .place-order-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            padding: 15px 20px;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);
            z-index: 50;
        }

        .place-order-btn {
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            border-radius: 15px;
            padding: 16px 24px;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: var(--shadow-lg);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 18px;
            font-weight: 600;
        }

            .place-order-btn:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(24, 84, 153, 0.3);
            }

            .place-order-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

        .btn-text {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .btn-price {
            font-size: 20px;
            font-weight: bold;
        }

        /* Loading */
        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        /* Responsive */
        @@media (max-width: 768px) {
            .main-container

        {
            padding: 15px;
        }

        .form-row {
            flex-direction: column;
            gap: 0;
        }

        .progress-steps {
            gap: 10px;
        }

        .step-label {
            font-size: 11px;
        }

        }

        /* Animations */
        .fade-in {
            animation: fadeIn 0.5s ease-out;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .success-message {
            background: var(--success-color);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            animation: slideDown 0.3s ease-out;
        }

        @@keyframes slideDown {
            from

        {
            opacity: 0;
            transform: translateY(-100%);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }
    </style>
</head>

<body>
    <header class="checkout-header">
        <div class="header-container">
            <button class="header-btn" onclick="window.history.back()" aria-label="العودة">
                <i class="fa-solid fa-chevron-right"></i>
            </button>
            <h1 class="header-title">تأكيد الطلب والدفع</h1>
            <div></div>
        </div>
    </header>

    <main class="main-container">
        <!-- Progress Steps -->
        <div class="progress-container fade-in">
            <div class="progress-steps">
                <div class="progress-line">
                    <div class="progress-line-active"></div>
                </div>
                <div class="step completed">
                    <div class="step-circle">
                        <i class="fas fa-check"></i>
                    </div>
                    <div class="step-label">السلة</div>
                </div>
                <div class="step active">
                    <div class="step-circle">2</div>
                    <div class="step-label">العنوان والتوصيل</div>
                </div>
                <div class="step">
                    <div class="step-circle">3</div>
                    <div class="step-label">الدفع</div>
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="order-summary fade-in">
            <div class="summary-header">
                <i class="fas fa-receipt"></i>
                <span>ملخص الطلب</span>
            </div>
            <div class="summary-item">
                <span>المجموع الفرعي</span>
                <span class="subtotal">0.00 جنيه</span>
            </div>
            <div class="summary-item">
                <span>رسوم التوصيل</span>
                <span class="delivery-fee">15.00 جنيه</span>
            </div>
            <div class="summary-item">
                <span>الإجمالي</span>
                <span class="total-amount">15.00 جنيه</span>
            </div>
        </div>

        <!-- Address Form -->
        <form class="address-form fade-in" id="addressForm">
            <div class="form-header">
                <i class="fas fa-map-marker-alt"></i>
                <span>عنوان التوصيل</span>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label required" for="label">تسمية العنوان</label>
                    <input type="text" id="label" name="label" class="form-input" placeholder="مثل: المنزل، العمل">
                    <div class="error-message" id="labelError">يرجى إدخال تسمية العنوان</div>
                </div>
                <div class="form-group">
                    <label class="form-label required" for="governorate">المحافظة</label>
                    <select id="governorate" name="governrateId" class="form-select">
                        <option value="">اختر المحافظة</option>
                        <option value="1">القاهرة</option>
                        <option value="2">الجيزة</option>
                        <option value="3">الإسكندرية</option>
                        <option value="4">القليوبية</option>
                        <option value="5">الشرقية</option>
                    </select>
                    <div class="error-message" id="governorateError">يرجى اختيار المحافظة</div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label required" for="area">المنطقة</label>
                    <select id="area" name="areaId" class="form-select">
                        <option value="">اختر المنطقة أولاً</option>
                    </select>
                    <div class="error-message" id="areaError">يرجى اختيار المنطقة</div>
                </div>
                <div class="form-group">
                    <label class="form-label required" for="nearestBranch">أقرب فرع</label>
                    <select id="nearestBranch" name="nearestBranchId" class="form-select">
                        <option value="">اختر أقرب فرع</option>
                        <option value="1">فرع المعادي</option>
                        <option value="2">فرع التجمع الخامس</option>
                        <option value="3">فرع مدينة نصر</option>
                        <option value="4">فرع الزمالك</option>
                    </select>
                    <div class="error-message" id="nearestBranchError">يرجى اختيار أقرب فرع</div>
                </div>
            </div>

            <div class="form-group full-width">
                <label class="form-label required" for="address">العنوان التفصيلي</label>
                <input type="text" id="address" name="address" class="form-input" placeholder="الشارع، الحي، معالم مميزة">
                <div class="error-message" id="addressError">يرجى إدخال العنوان التفصيلي</div>
            </div>

            <div class="form-group full-width">
                <label class="form-label required" for="buildingDetails">تفاصيل المبنى</label>
                <input type="text" id="buildingDetails" name="buildingDetails" class="form-input" placeholder="اسم المبنى أو رقم العقار">
                <div class="error-message" id="buildingDetailsError">يرجى إدخال تفاصيل المبنى</div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label" for="floor">الدور</label>
                    <input type="text" id="floor" name="floor" class="form-input" placeholder="مثل: الثالث">
                </div>
                <div class="form-group">
                    <label class="form-label" for="flatNumber">رقم الشقة</label>
                    <input type="text" id="flatNumber" name="flatNumber" class="form-input" placeholder="مثل: 12">
                </div>
            </div>

            <div class="form-group full-width">
                <label class="form-label" for="notes">ملاحظات إضافية</label>
                <textarea id="notes" name="notes" class="form-textarea" placeholder="أي ملاحظات خاصة بالتوصيل..."></textarea>
            </div>

            <div class="checkbox-group">
                <input type="checkbox" id="isDefault" name="isDefault" class="checkbox-input">
                <label for="isDefault" class="checkbox-label">حفظ كعنوان افتراضي</label>
            </div>
        </form>

        <!-- Delivery Options -->
        <div class="delivery-options fade-in">
            <div class="form-header">
                <i class="fas fa-truck"></i>
                <span>خيارات التوصيل</span>
            </div>

            <div class="delivery-option selected" data-price="15">
                <input type="radio" name="delivery" value="standard" class="delivery-radio" checked>
                <div class="delivery-info">
                    <div class="delivery-title">توصيل عادي</div>
                    <div class="delivery-description">خلال 45-60 دقيقة</div>
                </div>
                <div class="delivery-price">15.00 جنيه</div>
            </div>

            <div class="delivery-option" data-price="25">
                <input type="radio" name="delivery" value="express" class="delivery-radio">
                <div class="delivery-info">
                    <div class="delivery-title">توصيل سريع</div>
                    <div class="delivery-description">خلال 30 دقيقة</div>
                </div>
                <div class="delivery-price">25.00 جنيه</div>
            </div>
        </div>
    </main>

    <!-- Place Order Button -->
    <div class="place-order-container">
        <button class="place-order-btn" id="placeOrderBtn">
            <div class="btn-text">
                <i class="fas fa-shopping-bag"></i>
                <span>تأكيد الطلب</span>
            </div>
            <div class="btn-price total-amount">15.00 جنيه</div>
        </button>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const CART_KEY = "food_ecom_cart";
            const form = document.getElementById('addressForm');
            const placeOrderBtn = document.getElementById('placeOrderBtn');
            const deliveryOptions = document.querySelectorAll('.delivery-option');

            // Areas data (mock data - should come from API)
            const areas = {
                "1": [ // القاهرة
                    { id: 1, name: "مدينة نصر" },
                    { id: 2, name: "التجمع الخامس" },
                    { id: 3, name: "المعادي" },
                    { id: 4, name: "الزمالك" },
                    { id: 5, name: "وسط البلد" }
                ],
                "2": [ // الجيزة
                    { id: 6, name: "الدقي" },
                    { id: 7, name: "المهندسين" },
                    { id: 8, name: "6 أكتوبر" },
                    { id: 9, name: "الهرم" }
                ]
                // Add more governorates and areas as needed
            };

            // Load cart data and calculate totals
            const loadCartSummary = () => {
                try {
                    const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
                    let subtotal = 0;

                    cart.forEach(item => {
                        const toppingsTotal = (item.SelectedToppingGroups || []).reduce((sum, group) => {
                            return sum + group.SelectedToppingOptions.reduce((optSum, opt) => {
                                return optSum + (opt.PriceAtOrderTime * opt.Quantity);
                            }, 0);
                        }, 0);

                        subtotal += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
                    });

                    const deliveryFee = parseFloat(document.querySelector('.delivery-option.selected').dataset.price) || 15;
                    const total = subtotal + deliveryFee;

                    document.querySelector('.subtotal').textContent = `${subtotal.toFixed(2)} جنيه`;
                    document.querySelector('.delivery-fee').textContent = `${deliveryFee.toFixed(2)} جنيه`;
                    document.querySelectorAll('.total-amount').forEach(el => {
                        el.textContent = `${total.toFixed(2)} جنيه`;
                    });

                } catch (error) {
                    console.error('Error loading cart:', error);
                }
            };

            // Handle governorate change
            document.getElementById('governorate').addEventListener('change', function() {
                const areaSelect = document.getElementById('area');
                const selectedGov = this.value;

                areaSelect.innerHTML = '<option value="">اختر المنطقة</option>';

                if (selectedGov && areas[selectedGov]) {
                    areas[selectedGov].forEach(area => {
                        const option = document.createElement('option');
                        option.value = area.id;
                        option.textContent = area.name;
                        areaSelect.appendChild(option);
                    });
                }
            });

            // Handle delivery option changes
            deliveryOptions.forEach(option => {
                option.addEventListener('click', () => {
                    deliveryOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    option.querySelector('.delivery-radio').checked = true;
                    loadCartSummary(); // Recalculate total
                });
            });

            // Form validation
            const validateForm = () => {
                const required = ['label', 'governrateId', 'areaId', 'nearestBranchId', 'address', 'buildingDetails'];
                let isValid = true;

                required.forEach(field => {
                    const input = document.querySelector(`[name="${field}"]`);
                    const errorEl = document.getElementById(field + 'Error') || document.getElementById(field.replace('Id', '') + 'Error');

                    if (!input.value.trim()) {
                        input.classList.add('error');
                        if (errorEl) errorEl.classList.add('show');
                        isValid = false;
                    } else {
                        input.classList.remove('error');
                        if (errorEl) errorEl.classList.remove('show');
                    }
                });

                return isValid;
            };

            // Remove error styling on input
            form.addEventListener('input', (e) => {
                if (e.target.classList.contains('error')) {
                    e.target.classList.remove('error');
                    const errorEl = document.getElementById(e.target.name + 'Error') ||
                                  document.getElementById(e.target.name.replace('Id', '') + 'Error');
                    if (errorEl) errorEl.classList.remove('show');
                }
            });

            // Handle form submission
            placeOrderBtn.addEventListener('click', async (e) => {
                e.preventDefault();

                if (!validateForm()) {
                    return;
                }

                // Show loading state
                placeOrderBtn.disabled = true;
                const btnText = placeOrderBtn.querySelector('.btn-text span');
                const originalText = btnText.textContent;
                btnText.innerHTML = '<div class="loading-spinner"></div> جاري المعالجة...';

                try {
                    // Collect form data
                    const formData = new FormData(form);
                    const addressData = {
                        Label: formData.get('label'),
                        GovernrateId: parseInt(formData.get('governrateId')),
                        AreaId: parseInt(formData.get('areaId')),
                        NearestBranchId: parseInt(formData.get('nearestBranchId')),
                        Address: formData.get('address'),
                        BuildingDetails: formData.get('buildingDetails'),
                        Floor: formData.get('floor') || null,
                        FlatNumber: formData.get('flatNumber') || null,
                        Notes: formData.get('notes') || null,
                        IsDefault: formData.get('isDefault') === 'on'
                    };

                    const deliveryType = document.querySelector('input[name="delivery"]:checked').value;
                    const cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];

                    // Simulate API call
                    await new Promise(resolve => setTimeout(resolve, 2000));

                    // Show success message
                    const successMessage = document.createElement('div');
                    successMessage.className = 'success-message';
                    successMessage.innerHTML = `
                        <i class="fas fa-check-circle"></i>
                        <span>تم تأكيد طلبك بنجاح! سيتم التوصيل خلال ${deliveryType === 'express' ? '30' : '45-60'} دقيقة</span>
                    `;
                    document.querySelector('.main-container').insertBefore(successMessage, document.querySelector('.progress-container'));

                    // Clear cart and redirect after delay
                    setTimeout(() => {
                        localStorage.removeItem(CART_KEY);
                        window.location.href = 'order-confirmation.html';
                    }, 2000);

                } catch (error) {
                    console.error('Order placement error:', error);
                    btnText.textContent = 'حدث خطأ، حاول مرة أخرى';

                    setTimeout(() => {
                        btnText.textContent = originalText;
                        placeOrderBtn.disabled = false;
                    }, 2000);
                }
            });

            // Auto-save form data to localStorage
            const saveFormData = () => {
                const formData = new FormData(form);
                const data = {};
                for (let [key, value] of formData.entries()) {
                    data[key] = value;
                }
                localStorage.setItem('checkout_address', JSON.stringify(data));
            };

            // Load saved form data
            const loadFormData = () => {
                try {
                    const savedData = localStorage.getItem('checkout_address');
                    if (savedData) {
                        const data = JSON.parse(savedData);
                        Object.keys(data).forEach(key => {
                            const input = document.querySelector(`[name="${key}"]`);
                            if (input) {
                                if (input.type === 'checkbox') {
                                    input.checked = data[key] === 'on';
                                } else {
                                    input.value = data[key];
                                }

                                // Trigger change event for dependent selects
                                if (key === 'governrateId') {
                                    input.dispatchEvent(new Event('change'));
                                    setTimeout(() => {
                                        const areaSelect = document.querySelector('[name="areaId"]');
                                        if (areaSelect && data.areaId) {
                                            areaSelect.value = data.areaId;
                                        }
                                    }, 100);
                                }
                            }
                        });
                    }
                } catch (error) {
                    console.error('Error loading saved form data:', error);
                }
            };

            // Save form data on input changes
            form.addEventListener('input', saveFormData);
            form.addEventListener('change', saveFormData);

            // Phone number validation and formatting
            const addPhoneField = () => {
                const phoneGroup = document.createElement('div');
                phoneGroup.className = 'form-group full-width';
                phoneGroup.innerHTML = `
                    <label class="form-label required" for="phone">رقم الهاتف</label>
                    <input type="tel" id="phone" name="phone" class="form-input" placeholder="01xxxxxxxxx" maxlength="11">
                    <div class="error-message" id="phoneError">يرجى إدخال رقم هاتف صحيح</div>
                `;

                // Insert before notes field
                const notesGroup = document.querySelector('[name="notes"]').closest('.form-group');
                notesGroup.parentNode.insertBefore(phoneGroup, notesGroup);

                // Add phone validation
                const phoneInput = document.getElementById('phone');
                phoneInput.addEventListener('input', function() {
                    // Remove non-digits
                    this.value = this.value.replace(/\D/g, '');

                    // Validate Egyptian phone number format
                    const isValid = /^01[0-9]{9}$/.test(this.value);
                    const errorEl = document.getElementById('phoneError');

                    if (this.value && !isValid) {
                        this.classList.add('error');
                        errorEl.classList.add('show');
                        errorEl.textContent = 'رقم الهاتف يجب أن يبدأ بـ 01 ويحتوي على 11 رقم';
                    } else {
                        this.classList.remove('error');
                        errorEl.classList.remove('show');
                    }
                });
            };

            // Add delivery time selection
            const addDeliveryTimeField = () => {
                const timeGroup = document.createElement('div');
                timeGroup.className = 'delivery-options fade-in';
                timeGroup.innerHTML = `
                    <div class="form-header">
                        <i class="fas fa-clock"></i>
                        <span>وقت التوصيل المفضل</span>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label" for="deliveryDate">التاريخ</label>
                            <input type="date" id="deliveryDate" name="deliveryDate" class="form-input">
                        </div>
                        <div class="form-group">
                            <label class="form-label" for="deliveryTime">الوقت</label>
                            <select id="deliveryTime" name="deliveryTime" class="form-select">
                                <option value="">في أسرع وقت</option>
                                <option value="12:00-14:00">12:00 - 2:00 ظهراً</option>
                                <option value="14:00-16:00">2:00 - 4:00 مساءً</option>
                                <option value="16:00-18:00">4:00 - 6:00 مساءً</option>
                                <option value="18:00-20:00">6:00 - 8:00 مساءً</option>
                                <option value="20:00-22:00">8:00 - 10:00 مساءً</option>
                            </select>
                        </div>
                    </div>
                `;

                const deliveryOptionsContainer = document.querySelector('.delivery-options');
                deliveryOptionsContainer.parentNode.insertBefore(timeGroup, deliveryOptionsContainer.nextSibling);

                // Set minimum date to today
                const today = new Date();
                const maxDate = new Date();
                maxDate.setDate(today.getDate() + 7); // Allow booking up to 7 days ahead

                document.getElementById('deliveryDate').min = today.toISOString().split('T')[0];
                document.getElementById('deliveryDate').max = maxDate.toISOString().split('T')[0];
            };

            // Payment method selection
            const addPaymentMethods = () => {
                const paymentGroup = document.createElement('div');
                paymentGroup.className = 'delivery-options fade-in';
                paymentGroup.innerHTML = `
                    <div class="form-header">
                        <i class="fas fa-credit-card"></i>
                        <span>طريقة الدفع</span>
                    </div>

                    <div class="delivery-option selected" data-payment="cash">
                        <input type="radio" name="payment" value="cash" class="delivery-radio" checked>
                        <div class="delivery-info">
                            <div class="delivery-title">الدفع عند الاستلام</div>
                            <div class="delivery-description">ادفع نقداً عند وصول الطلب</div>
                        </div>
                        <div class="delivery-price">
                            <i class="fas fa-money-bill-wave"></i>
                        </div>
                    </div>

                    <div class="delivery-option" data-payment="card">
                        <input type="radio" name="payment" value="card" class="delivery-radio">
                        <div class="delivery-info">
                            <div class="delivery-title">الدفع بالبطاقة</div>
                            <div class="delivery-description">فيزا أو ماستركارد</div>
                        </div>
                        <div class="delivery-price">
                            <i class="fas fa-credit-card"></i>
                        </div>
                    </div>

                    <div class="delivery-option" data-payment="wallet">
                        <input type="radio" name="payment" value="wallet" class="delivery-radio">
                        <div class="delivery-info">
                            <div class="delivery-title">المحفظة الإلكترونية</div>
                            <div class="delivery-description">فودافون كاش، أورانج موني</div>
                        </div>
                        <div class="delivery-price">
                            <i class="fas fa-mobile-alt"></i>
                        </div>
                    </div>
                `;

                document.querySelector('.place-order-container').parentNode.insertBefore(paymentGroup, document.querySelector('.place-order-container'));

                // Handle payment method selection
                const paymentOptions = paymentGroup.querySelectorAll('.delivery-option');
                paymentOptions.forEach(option => {
                    option.addEventListener('click', () => {
                        paymentOptions.forEach(opt => opt.classList.remove('selected'));
                        option.classList.add('selected');
                        option.querySelector('.delivery-radio').checked = true;
                    });
                });
            };

            // Initialize enhanced features
            const initEnhancedFeatures = () => {
                addPhoneField();
                addDeliveryTimeField();
                addPaymentMethods();
                loadFormData();
                loadCartSummary();

                // Add progress update animation
                setTimeout(() => {
                    document.querySelector('.progress-line-active').style.width = '66%';
                }, 500);

                // Add form animation on scroll
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.style.animation = 'fadeIn 0.5s ease-out';
                        }
                    });
                });

                document.querySelectorAll('.fade-in').forEach(el => {
                    observer.observe(el);
                });
            };

            // Update validation to include phone
            const originalValidateForm = validateForm;
            window.validateForm = () => {
                const required = ['label', 'governrateId', 'areaId', 'nearestBranchId', 'address', 'buildingDetails', 'phone'];
                let isValid = true;

                required.forEach(field => {
                    const input = document.querySelector(`[name="${field}"]`);
                    const errorEl = document.getElementById(field + 'Error') || document.getElementById(field.replace('Id', '') + 'Error');

                    if (!input.value.trim()) {
                        input.classList.add('error');
                        if (errorEl) errorEl.classList.add('show');
                        isValid = false;
                    } else if (field === 'phone') {
                        const phoneValid = /^01[0-9]{9}$/.test(input.value);
                        if (!phoneValid) {
                            input.classList.add('error');
                            if (errorEl) {
                                errorEl.classList.add('show');
                                errorEl.textContent = 'رقم الهاتف يجب أن يبدأ بـ 01 ويحتوي على 11 رقم';
                            }
                            isValid = false;
                        } else {
                            input.classList.remove('error');
                            if (errorEl) errorEl.classList.remove('show');
                        }
                    } else {
                        input.classList.remove('error');
                        if (errorEl) errorEl.classList.remove('show');
                    }
                });

                return isValid;
            };

            // Initialize everything
            initEnhancedFeatures();

            // Clear saved form data on successful order
            const originalSuccessHandler = () => {
                localStorage.removeItem('checkout_address');
                localStorage.removeItem(CART_KEY);
            };

            // Add order tracking info to success message
            window.showOrderSuccess = (orderNumber) => {
                const successMessage = document.createElement('div');
                successMessage.className = 'success-message';
                successMessage.innerHTML = `
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <div>تم تأكيد طلبك بنجاح!</div>
                        <div style="font-size: 14px; margin-top: 4px;">رقم الطلب: #${orderNumber}</div>
                    </div>
                `;
                document.querySelector('.main-container').insertBefore(successMessage, document.querySelector('.progress-container'));

                originalSuccessHandler();
            };
        });

        // Global function for toggling collapse sections (if needed)
        function toggleCollapse(button) {
            const content = button.closest('.delivery-options').querySelector('.toppings-content');
            if (content) {
                content.classList.toggle('open');
                button.classList.toggle('open');

                const span = button.querySelector('span');
                if (span) {
                    span.textContent = content.classList.contains('open') ? 'إخفاء التفاصيل' : 'عرض التفاصيل';
                }
            }
        }
    </script>
</body>
</html>