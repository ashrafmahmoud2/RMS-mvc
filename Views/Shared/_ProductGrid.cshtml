@using RMS.Web.Core.ViewModels.Home
@using System.Globalization
@model IEnumerable<CategoryWithItemsViewModel>



<div class="products-grid">
    <div class="container">
        @foreach (var category in Model)
        {
            <section class="category" id="@category.CategoryNameEn" data-category-name="@category.CategoryNameAr">
                <h3 class="title">
                    <span class="before"></span>
                    <i class="fa-solid fa-burger"></i>
                    @category.CategoryNameAr
                    <span class="after"></span>
                </h3>
                <div class="product-list @category.ItemsCardsLayout">
                    @foreach (var item in category.Items)
                    {
                        <a asp-controller="Item" asp-action="Detail" asp-route-itemId="@item.ItemId"
                           data-url="@Url.Action("Detail", "Item", new { itemId = item.ItemId })"
                           class="js-render-modal product-card"
                           data-id="@item.ItemId"
                           data-price="@item.BasePrice.ToString(CultureInfo.InvariantCulture)">
                            >
                            <div class="product-image">
                                <img src="@Url.Content(item.ThumbnailUrl)" alt="@item.NameAr" loading="lazy" />
                            </div>
                            <div class="product-info">
                                <h3 class="product-title">@item.NameAr</h3>
                                <div class="price-row">

                                    <span>@item.BasePrice ج.م</span>

                                    <button type="button"
                                            class="add-to-cart"
                                            data-id="@item.ItemId"
                                            data-price="@item.BasePrice"
                                            data-thumbnail-url="@Url.Content(item.ThumbnailUrl)">
                                        <i class="fa-solid fa-plus"></i>
                                    </button>

                                </div>
                            </div>
                        </a>
                    }
                </div>
            </section>
        }
    </div>
</div>



<script>
    // --- State Management ---
    const state = {
        itemId: null,
        quantity: 1,
        basePrice: 0,
        selectedToppings: new Map(), // Map<groupId, Map<optionId, topping>>
        groups: [],
    };

    // --- Utility Functions ---
    const $ = (selector, parent = document) => parent.querySelector(selector);
    const $$ = (selector, parent = document) => [...parent.querySelectorAll(selector)];
    const CART_KEY = 'food_ecom_cart';

    function getCart() {
        try {
            const cart = localStorage.getItem(CART_KEY);
            return cart ? JSON.parse(cart) : [];
        } catch (e) {
            console.error('Error parsing cart from localStorage:', e);
            return [];
        }
    }

    function saveCart(cart) {
        localStorage.setItem(CART_KEY, JSON.stringify(cart));
        window.dispatchEvent(new CustomEvent('cartUpdated'));
    }

    function showMessage(message) {
        alert(message); // TODO: replace with toast/notification
    }

    // --- Price Calculation ---
    function updateTotalPrice() {
        let toppingsTotal = 0;
        for (const group of state.selectedToppings.values()) {
            for (const topping of group.values()) {
                toppingsTotal += topping.PriceAtOrderTime * topping.Quantity;
            }
        }
        const totalPrice = ((state.basePrice + toppingsTotal) * state.quantity).toFixed(2);
        const priceElement = $('#totalPrice');
        if (!priceElement) return;
        const newHtml = `${totalPrice} <span class="currency">ج.م</span>`;
        if (priceElement.innerHTML !== newHtml) {
            priceElement.innerHTML = newHtml;
            priceElement.classList.add('updated');
            setTimeout(() => priceElement.classList.remove('updated'), 400);
        }
    }

    // --- Counter -
    function incrementCounter() {
        state.quantity++;
        const el = $('#counterValue');
        if (el) el.textContent = state.quantity;
        updateTotalPrice();
    }

    function decrementCounter() {
        if (state.quantity > 1) {
            state.quantity--;
            const el = $('#counterValue');
            if (el) el.textContent = state.quantity;
            updateTotalPrice();
        }
    }

    // --- Toppings ---
    function handleRadioSelection(groupId, optionId, price) {
        $$(`[data-group-id="${groupId}"]`).forEach(btn => btn.setAttribute('data-selected', 'false'));
        state.selectedToppings.set(groupId, new Map());
        const el = $(`[data-option-id="${optionId}"]`);
        if (el) el.setAttribute('data-selected', 'true');
        state.selectedToppings.get(groupId).set(optionId, {
            ToppingOptionId: optionId,
            Quantity: 1,
            PriceAtOrderTime: price,
            ImageUrl: getToppingImageUrl(optionId)
        });
    }

    function handleCheckboxSelection(groupId, optionId, price, isSelected, maxAllowed) {
        const groupMap = state.selectedToppings.get(groupId);
        if (isSelected) {
            const el = $(`[data-option-id="${optionId}"]`);
            if (el) el.setAttribute('data-selected', 'false');
            groupMap.delete(optionId);
        } else if (groupMap.size < maxAllowed) {
            const el = $(`[data-option-id="${optionId}"]`);
            if (el) el.setAttribute('data-selected', 'true');
            groupMap.set(optionId, {
                ToppingOptionId: optionId,
                Quantity: 1,
                PriceAtOrderTime: price,
                ImageUrl: getToppingImageUrl(optionId)
            });
        } else {
            showMessage(`يمكنك اختيار ${maxAllowed} خيار كحد أقصى من هذه المجموعة`);
        }
    }

    function toggleTopping(target) {
        const optionId = parseInt(target.dataset.optionId);
        const groupId = parseInt(target.dataset.groupId);
        const maxAllowed = parseInt(target.dataset.maxAllowed);
        const isSelected = target.getAttribute('data-selected') === 'true';
        const price = parseFloat(target.dataset.optionPrice);
        if (!state.selectedToppings.has(groupId)) state.selectedToppings.set(groupId, new Map());
        if (maxAllowed === 1) handleRadioSelection(groupId, optionId, price);
        else handleCheckboxSelection(groupId, optionId, price, isSelected, maxAllowed);
        updateTotalPrice();
    }

    // --- Validation ---
    function validateSelections() {
        for (const group of state.groups) {
            const selectedCount = state.selectedToppings.has(group.Id) ? state.selectedToppings.get(group.Id).size : 0;
            if (selectedCount < group.MinAllowedOptions) {
                showMessage(`يجب اختيار ${group.MinAllowedOptions} على الأقل من ${group.TitleAr}`);
                return false;
            }
        }
        return true;
    }

    // --- Cart ---
    function addToCart() {
        if (!validateSelections()) return;

        const cart = getCart();

        const selectedToppingGroups = [...state.selectedToppings.entries()].map(([groupId, toppingsMap]) => ({
            ToppingGroupId: parseInt(groupId),
            SelectedToppingOptions: [...toppingsMap.values()].map(option => ({
                ...option,
                ImageUrl: option.ImageUrl || getToppingImageUrl(option.ToppingOptionId)
            })),
        }));

        const existingIndex = cart.findIndex(item => item.ItemId === state.itemId);
        const thumbnailUrl = getItemThumbnailUrl(state.itemId);

        const cartItem = {
            ItemId: state.itemId,
            Quantity: state.quantity,
            ThumbnailUrl: thumbnailUrl,
            PriceAtOrderTime: state.basePrice,
            CashbackPercent: null,
            DiscountPercent: null,
            SelectedToppingGroups: selectedToppingGroups
        };

        if (existingIndex !== -1) cart[existingIndex] = cartItem;
        else cart.push(cartItem);

        saveCart(cart);
        updateCartAccessBtn();
        closeModal();
    }

    function getItemThumbnailUrl(itemId) {
        const el = document.querySelector(`.js-render-modal[data-id="${itemId}"] img`);
        return el ? el.src : '';
    }

    function getToppingImageUrl(optionId) {
        const el = document.querySelector(`.topping-item[data-option-id="${optionId}"]`);
        return el ? el.dataset.imageUrl || '' : '';
    }

    // --- Modal ---
    function closeModal() {
        const modal = $('.my-modal');
        if (modal) {
            modal.style.animation = 'fadeOut 0.3s ease-in-out';
            setTimeout(() => {
                modal.remove();
                document.body.style.overflow = '';
            }, 300);
        }
    }

    function initializeModal(data, itemId, basePrice) {
        state.itemId = parseInt(itemId);
        state.basePrice = parseFloat(basePrice) || 0;
        state.groups = data.ItemToppingGroups;
        state.quantity = 1;
        state.selectedToppings = new Map();

        if (!state.basePrice) {
            const priceEl = $('#totalPrice');
            if (priceEl) state.basePrice = parseFloat(priceEl.textContent.replace(/[^\d.]/g, '')) || 0;
        }

        const cart = getCart();
        const existingItem = cart.find(item => item.ItemId === state.itemId);
       
        // if (existingItem) {
        //     state.quantity = existingItem.Quantity;
        //     const el = $('#counterValue');
        //     if (el) el.textContent = state.quantity;
        //     existingItem.SelectedToppingGroups.forEach(group => {
        //         const groupMap = new Map();
        //         group.SelectedToppingOptions.forEach(option => groupMap.set(option.ToppingOptionId, option));
        //         state.selectedToppings.set(group.ToppingGroupId, groupMap);
        //     });
        // }

        // $$('.topping-item').forEach(button => {
        //     const optionId = parseInt(button.dataset.optionId);
        //     const groupId = parseInt(button.dataset.groupId);
        //     const isSelected = state.selectedToppings.has(groupId) && state.selectedToppings.get(groupId).has(optionId);
        //     button.setAttribute('data-selected', isSelected ? 'true' : 'false');
        // });

        updateTotalPrice();
    }

    // --- Cart Access Button ---
    function updateCartAccessBtn() {
        const cart = getCart();
        const btn = document.getElementById('cartAccessBtn');
        const thumbnailsContainer = document.getElementById('cartThumbnails');
        const totalPriceEl = document.getElementById('cartTotalPrice');

        if (!btn) return;

        if (cart.length === 0) {
            btn.style.display = 'none';
            btn.classList.remove('bounce'); // remove bounce if no items
            return;
        }

        // Show button
        btn.style.display = 'flex';

        // Bounce animation
        btn.classList.remove('bounce');
        void btn.offsetWidth; // force reflow
        btn.classList.add('bounce');

        // Calculate total price
        let totalPrice = 0;
        cart.forEach(item => {
            let toppingsTotal = 0;
            item.SelectedToppingGroups?.forEach(group =>
                group.SelectedToppingOptions?.forEach(opt =>
                    toppingsTotal += opt.PriceAtOrderTime * opt.Quantity
                )
            );
            totalPrice += (item.PriceAtOrderTime + toppingsTotal) * item.Quantity;
        });
        if (totalPriceEl) totalPriceEl.textContent = totalPrice.toFixed(2);

        // Render thumbnails
        if (thumbnailsContainer) {
            thumbnailsContainer.innerHTML = '';
            const maxVisible = 2;
            const itemsToShow = cart.slice(0, maxVisible);

            itemsToShow.forEach((item, index) => {
                const img = document.createElement('img');
                img.src = item.ThumbnailUrl;
                img.alt = `منتج ${index + 1}`;
                if (index > 0) img.classList.add('overlap');
                thumbnailsContainer.appendChild(img);
            });

            if (cart.length > maxVisible) {
                const overflow = document.createElement('div');
                overflow.className = 'cart-access__overflow overlap';
                overflow.textContent = `+${cart.length - maxVisible}`;
                thumbnailsContainer.appendChild(overflow);
            }
        }
    }

    // Initial call
    updateCartAccessBtn();
    window.addEventListener('cartUpdated', updateCartAccessBtn);


    // --- Event Delegation ---
    document.addEventListener('click', e => {
        const target = e.target.closest('.js-render-modal, .my-modal .close, .counter-btn, .checkout-btn, .topping-item');
        if (!target) return;

        if (target.matches('.js-render-modal')) {
            e.preventDefault();
            const itemId = target.dataset.id;
            const basePrice = target.dataset.price;

            fetch(target.dataset.url)
                .then(r => r.text())
                .then(html => {
                    const existing = $('.my-modal'); if (existing) existing.remove();
                    document.body.insertAdjacentHTML('beforeend', html);
                    document.body.style.overflow = 'hidden';
                    const dataEl = $('#modal-data');
                    if (dataEl) {
                        const data = JSON.parse(dataEl.textContent);
                        initializeModal(data, itemId, basePrice);
                    }
                })
                .catch(err => console.error('Failed to load modal:', err));

        } else if (target.matches('.my-modal .close')) closeModal();
        else if (target.matches('.counter-btn.decrement')) decrementCounter();
        else if (target.matches('.counter-btn.increment')) incrementCounter();
        else if (target.matches('.checkout-btn')) addToCart();
        else if (target.matches('.topping-item')) toggleTopping(target);
    });
</script>

<style>
    .products-grid {
        display: grid;
        gap: 20px;
    }

    .category {
        border-bottom: 1px solid #eee;
    }

        .category:last-child {
            border-bottom: none;
        }

        .category .title {
            /* font-family: 'Noto Sans Arabic', Arial, sans-serif; */
            font-size: 34px;
            font-weight: bold;
            color: #415e7e;
            margin: 20px 0;
            text-align: start;
        }

    /* General product-card */
    .product-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 10px;
    }

    .product-card {
        color: #333;
        background-color: transparent;
        border: none;
        border-radius: 20px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    @@media (min-width: 1000px) {
        .product-card {
            max-width: 500px;
            min-width: 350px;
            width: 100%;
            /* Ensures responsiveness within limits */
        }

        .product-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            /* auto-fit keeps items more balanced */
            gap: 16px;
            /* Slightly increased for better spacing */
            justify-content: center;
            /* Centers the grid for better alignment */
        }
    }




    .product-card .product-image {
        aspect-ratio: 16/10;
        border-radius: 20px;
        background-color: #fff;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        width: 100%;
        height: auto;
        background-image: url(https://res.cloudinary.com/dwzq2jxms/image/upload/v1754841367/Copilot_20250607_235033_kmgd2m.png);
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
    }

    .product-card img {
        /* background-color: #fff; */
        display: block;
        object-fit: scale-down;
        max-width: 100%;
        max-height: 100%;
        border-radius: 20px;
    }


    .product-info {
        padding: 15px;
        text-align: start;
        width: 100%;
    }

    .product-card .product-info h3 {
        overflow: hidden;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        text-overflow: ellipsis;
        -webkit-line-clamp: 1;
        /* font-family: 'Noto Sans Arabic', Arial, sans-serif; */
        font-size: 20px;
        font-weight: bold;
        color: #333;
        padding-bottom: 2px;
    }

    .product-card .product-info .description {
        overflow: hidden;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        text-overflow: ellipsis;
        -webkit-line-clamp: 2;
        font-family: 'Reem Kufi', Arial, sans-serif;
        font-size: 18px;
        line-height: 1.5;
        color: #777;
        padding: 8px 0;
    }


    .product-card .price-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 4px;
    }

    .product-card .price {
        /* font-family: 'Tajawal', Arial, sans-serif; */
        font-size: 20px;
        font-weight: bold;
        color: #125079;
    }

    .product-card .add-to-cart {
        padding: 8px 15px;
        cursor: pointer;
        background-color: #185499;
        color: white;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
    }


    @@media (max-width: 768px) {
        .product-list.product-Layout-two-column {
            grid-template-columns: repeat(2, 1fr);
        }

        .product-Layout-two-column .product-image {
            min-height: 180px;
        }

        .product-Layout-two-column .product-card .product-info h3 {
            -webkit-line-clamp: 2;
            min-height: 50px;
            font-size: 20px;
        }

        .product-Layout-two-column .add-to-cart {
            display: none;
        }
    }


    @@media (max-width: 500px) {
        .prodect-Layout-one-rectengle-column {
            grid-template-columns: repeat(1, 1fr);
            gap: 15px;
        }

            .prodect-Layout-one-rectengle-column .product-card {
                display: flex;
                flex-direction: row-reverse;
                justify-content: space-between;
                max-height: 180px;
                min-height: 160px;
                background-color: #ffffff;
            }

            .prodect-Layout-one-rectengle-column .product-title {
                padding-top: 3px;
                /* background-color: aquamarine */
            }

            .prodect-Layout-one-rectengle-column .description {
                line-height: 1.4;
                /* background-color: burlywood */
            }



            .prodect-Layout-one-rectengle-column .product-image img {
                width: 100%;
                height: 100%;
                object-fit: scale-down;
            }

            .prodect-Layout-one-rectengle-column .product-image {
                max-width: 150px;
                min-width: 150px;
                height: 100%;
            }

            .prodect-Layout-one-rectengle-column .add-to-cart {
                display: none;
            }
    }




    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(50px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideInZoom {
        0% {
            transform: translateX(-100%) scale(0.8);
            opacity: 0;
        }

        100% {
            transform: translateX(0) scale(1);
            opacity: 1;
        }
    }

    .product-card {
        opacity: 0;
        transform: translateY(50px);
        animation: fadeInUp 1s ease-out forwards;
    }

        .product-card:nth-child(1) {
            animation-delay: 0.1s;
        }

        .product-card:nth-child(2) {
            animation-delay: 0.3s;
        }

        .product-card:nth-child(3) {
            animation-delay: 0.5s;
        }

        .product-card:nth-child(4) {
            animation-delay: 0.7s;
        }

        .product-card img {
            width: 100%;
            height: auto;
            display: block;
            animation: slideInZoom 1s ease-in-out forwards;
        }

        .product-card:nth-child(1) img {
            animation-delay: 0.1s;
        }

        .product-card:nth-child(2) img {
            animation-delay: 0.3s;
        }

        .product-card:nth-child(3) img {
            animation-delay: 0.5s;
        }

        .product-card:nth-child(4) img {
            animation-delay: 0.7s;
        }

</style>


